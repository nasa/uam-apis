openapi: 3.0.3
info:
  title: X4 Airspace Authorization
  version: 1.0.0-uam
  description: |-
    Interface definitions for 'Airspace Authorization' in X4.
security:
  - Authority:
      - utm.strategic_coordination

paths:
  /airspace_authorization:
    description: Submit an operational intent to Airspace Authorization

    put:
      summary: Submit all operational intent information for this Authorization.
      security:
        - Authority:
            - utm.strategic_coordination
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthOperation'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutAuthOperationResponse'
          description: Operation was successfully submitted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

components:
  securitySchemes:
    Authority:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://auth.example.com/oauth/token
          scopes:
            utm.strategic_coordination: |-
              Client may perform actions encompassed by the strategic coordination role including strategic conflict detection.
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority will issue access tokens that are JSON Web Tokens as 
        defined in RFC 7519, using the `RS256` algorithm for the signature, publish to all providers the public key for verifying that signature, 
        and implement standard OAuth server discovery mechanisms as described in RFC 8414.
        The following fields must be included in the JWT claim for access tokens issued by this authority:
        * `iss`, with the URL at which the token generation request was received.
        * `exp`, with a time no further than 1 hour in the future.
        * `sub`, with unique ID of the client requesting the access token.
        * `scope`, with a string composed of a space-separated list of strings indicating the scopes granted, per RFC 6749.
        * `jti`, according to RFC 7519.
        Following the principle of least privilege, only one of the scopes enumerated in this document should be granted in a single token (though other scopes 
        may accompany it).  The tokens granted by this authority must protect against reuse of received tokens to impersonate the sender to other recipients 
        (via use of the `aud` claim or other means).
        When using the `aud` claim to protect against the reuse of received tokens, and absent guidance on behalf of the competent authority to the contrary, 
        the JWT `aud` claim requested by the client must be included in each access token and must contain the fully qualified domain name of the URL the access 
        token will be used to access.  For example, if a PSU were querying the endpoint at https://sub.example.com:8888/airspace_authorization, the access token 
        included in the request should specify `"aud": "sub.example.com"`.
        Clients must provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.

  schemas:
    AuthOperation:
      description: |-
        Full description of the operation.
      required:
        - reference
        - details
        - flight_rules
        - adaptation_hash
      type: object
      properties:
        reference:
          # See PSU API
          $ref: '../psu/psu_api.yml#/components/schemas/OperationalIntentReference'
        details:
          # See PSU API
          $ref: '../psu/psu_api.yml#/components/schemas/OperationalIntentDetails'
        flight_rules:
          description: |-
            Describes the planned flight rules (e.g., IFR/VFR) for the operation. Will be held
            constant throught the operation.
          type: string
          enum:
            - IFR
            - VFR
        adaptation_hash:
          description: |-
            The hash value from ASDS corresponding to the Adaption ID that was
            used when planning this operation.
          anyOf:
            - $ref: '#/components/schemas/AdaptationHash'

    AdaptationHash:
      description: |-
        SHA256 hash from ASDS
      required:
        - hash
      type: object
      properties:
        hash:
          type: string
          maxLength: 64
          minLength: 64

    UUIDv4:
      description: |-
        Universally-unique identifier (version 4).
      maxLength: 36
      minLength: 36
      type: string
      format: uuid
      pattern: >-
        '^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$'
      example: d290f1ee-6c54-4b01-90e6-d701748f0851

    PutAuthOperationResponse:
      description: |-
        UUID indicating successful submission of an operation
      anyOf:
        - $ref: '#/components/schemas/UUIDv4'
    
    ErrorResponse:
      description: |-
        Human-readable string returned when an error occurs
        as a result of a PSU - Airspace Authorization transaction.
      type: object
      properties:
        message:
          description: |-
            Human-readable message indicating what error occurred and/or why.
          type: string
          example: 'The error occurred because [...]'
