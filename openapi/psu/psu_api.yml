openapi: 3.0.3
info:
  title: X4 UAM API (PSU->PSU)
  version: 0.2.0-uam
  description: |-
    Interface definitions between two Providers of Services UAM (PSU)
    PSU functionality includes sharing details of flight operational intents and constraints.
    Note: Unless otherwise specified, fields specified in a message but not declared in the API must be ignored.
    Whenever a object-type field may be omitted, it may also be set to null for the same effect.
 
    Note: Version 0.3.17 Commit ed1eac6 of the ASTM UTM API was used as starting point for editing this API.
    Property and Schema names where not changed from 'USS' to 'PSU' to support common models with the DSS
    API.
 
     
security:
- Authority:
  - utm.strategic_coordination
  - utm.constraint_management
  - utm.constraint_processing
  - utm.conformance_monitoring_sa
  - utm.availability_arbitration
 
tags:
  - name: Operational intent details
    description: |-
      Endpoints exposed by PSUs for interaction with details of operational intents.
  - name: Constraint details
    description: |-
      Endpoints exposed by PSUs for interaction with details of constraints.
  - name: Reports
    description: |-
      Endpoints exposed by the DSS for reporting peer DSS issues.
  - name: p2p_uam
    description: Endpoints exposed by PSUs for peer-peer communication.
 
 
#
#
#
 
components:
  securitySchemes:
    Authority:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://auth.example.com/oauth/token
          scopes:
            utm.strategic_coordination: |-
              Client may perform actions encompassed by the strategic coordination role including strategic conflict detection.
            utm.constraint_management: |-
              Client may manage (create, edit, and delete) constraints according to the constraint management role.
            utm.constraint_processing: |-
              Client may read constraint references from the DSS and details from the partner PSUs according to the constraint processing role.
            utm.conformance_monitoring_sa: |-
              Client may perform actions encompassed by the conformance monitoring for situational awareness role.
            utm.availability_arbitration: |-
              Client may set the availability state of PSUs in the DSS.
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority will issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, publish to all providers the public key for verifying that signature, and implement standard OAuth server discovery mechanisms as described in RFC 8414.
        The following fields must be included in the JWT claim for access tokens issued by this authority:
        * `iss`, with the URL at which the token generation request was received.
        * `exp`, with a time no further than 1 hour in the future.
        * `sub`, with unique ID of the client requesting the access token.
        * `scope`, with a string composed of a space-separated list of strings indicating the scopes granted, per RFC 6749.
        * `jti`, according to RFC 7519.
        Following the principle of least privilege, only one of the scopes enumerated in this document should be granted in a single token (though other scopes may accompany it).  The tokens granted by this authority must protect against reuse of received tokens to impersonate the sender to other recipients (via use of the `aud` claim or other means).
        When using the `aud` claim to protect against the reuse of received tokens, and absent guidance on behalf of the competent authority to the contrary, the JWT `aud` claim requested by the client must be included in each access token and must contain the fully qualified domain name of the URL the access token will be used to access.  For example, if a PSU were querying the endpoint at https://dss.example.com:8888/rid/v2/dss/identification_service_areas, the access token included in the request should specify `"aud": "dss.example.com"`.
        Clients must provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.
  schemas:
    UUIDv4Format:
      description: |-
        String whose format matches a version-4 UUID according to RFC 4122.
      maxLength: 36
      minLength: 36
      type: string
      format: uuid
      pattern: >-
        '^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$'
      example: 03e5572a-f733-49af-bc14-8a18bd53ee39
 
    EntityID:
      description: |-
        Identifier for an Entity communicated through the DSS.  Formatted as
        a UUIDv4.
      anyOf:
        - $ref: '#/components/schemas/UUIDv4Format'
      example: 2f8343be-6482-4d1b-a474-16847e01af1e
 
    EntityOVN:
      title: EntityOVN
      description: |-
        A token associated with a particular UAM Entity+version created
        by the DSS upon creation or modification of an Entity reference and provided
        to the client creating or modifying the Entity reference.  The EntityOVN
        is stored privately by the DSS and then compared against entries in a Key
        provided to mutate the airspace.  The EntityOVN is also provided by
        the client whenever that client transmits the full information of the Entity
        (either via GET, or via a subscription notification).
      type: string
      minLength: 16
      maxLength: 128
      example: 9d158f59-80b7-4c11-9c0c-8a2b4d936b2d
 
    SubscriptionID:
      description: |-
        Identifier for a subscription communicated through the DSS.  Formatted
        as a UUIDv4.
      anyOf:
        - $ref: '#/components/schemas/UUIDv4Format'
      example: 78ea3fe8-71c2-4f5c-9b44-9c02f5563c6f
 
    Key:
      description: |
        Proof that a client has obtained the latest airspace content, used to ensure that write
        operations to the DSS occur only when the latest content is known (i.e. has been read). The
        client is required to pass a current Key constructed from information obtained with
        previous read operations and subsequent requests for full information, and optionally,
        subscription updates for deconflicted write operations to the DSS.  The contents of this
        data structure are generated by the client.
      type: array
      items:
        $ref: '#/components/schemas/EntityOVN'
      default: []
 
    Time:
      required:
        - value
        - format
      type: object
      properties:
        value:
          type: string
          description: RFC3339-formatted time/date string.  The time zone must be
            'Z'.
          format: date-time
          example: '1985-04-12T23:20:50.52Z'
        format:
          type: string
          enum:
            - RFC3339
 
    Radius:
      required:
        - value
        - units
      type: object
      properties:
        value:
          format: float
          description: Distance from the centerpoint of a circular area, along the
            WGS84 ellipsoid.
          type: number
          minimum: 0
          exclusiveMinimum: true
          example: 300.183
        units:
          type: string
          description: FIXM-compatible units.  Only meters ("M") are acceptable for
            UAM.
          enum:
            - M
 
    Altitude:
      type: object
      required:
        - value
        - reference
        - units
      properties:
        value:
          description: |-
            The numeric value of the altitude. Note that min and max values are
            added as a sanity check. As use cases evolve and more options are
            made available in terms of units of measure or reference systems,
            these bounds may be re-evaluated.
          type: number
          format: double
          minimum: -8000
          exclusiveMinimum: false
          maximum: 100000
          exclusiveMaximum: false
        reference:
          description: |-
            A code indicating the reference for a vertical distance. See AIXM 5.1
            and FIXM 4.2.0. Currently, UAM only allows WGS84 with no immediate
            plans to allow other options. FIXM and AIXM allow for 'SFC' which is
            equivalent to AGL.
          type: string
          enum:
            - W84
        units:
          description: |-
            The reference quantities used to express the value of altitude. See
            FIXM 4.2. Currently, UAM only allows meters with no immediate plans
            to allow other options.
          type: string
          enum:
            - M
 
    Latitude:
      description: Degrees of latitude north of the equator, with reference to the
        WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      format: double
      example: 34.123
 
    Longitude:
      description: Degrees of longitude east of the Prime Meridian, with reference
        to the WGS84 ellipsoid.
      minimum: -180
      exclusiveMaximum: false
      maximum: 180
      exclusiveMinimum: false
      type: number
      format: double
      example: -118.456
 
    Polygon:
      description: |-
        An enclosed area on the earth.
        The bounding edges of this polygon are defined to be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude.
        The winding order must be interpreted as the order which produces the smaller area.
        The path between two vertices is defined to be the shortest possible path between those vertices.
        Edges may not cross.
        Vertices may not be duplicated.  In particular, the final polygon vertex must not be identical to the first vertex.
      required:
        - vertices
      type: object
      properties:
        vertices:
          minItems: 3
          type: array
          items:
            $ref: '#/components/schemas/LatLngPoint'
 
    LatLngPoint:
      description: Point on the earth's surface.
      required:
        - lat
        - lng
      type: object
      properties:
        lng:
          $ref: '#/components/schemas/Longitude'
        lat:
          $ref: '#/components/schemas/Latitude'
 
    Circle:
      description: |-
        A circular area on the surface of the earth.
      type: object
      required:
        - center
        - radius
      properties:
        center:
          $ref: '#/components/schemas/LatLngPoint'
        radius:
          $ref: '#/components/schemas/Radius'
 
    Volume3D:
      description: |-
        A three-dimensional geographic volume consisting of a vertically-extruded shape.
        Exactly one outline must be specified.
      required:
        - altitude_lower
        - altitude_upper
      type: object
      properties:
        outline_circle:
          anyOf:
            - $ref: '#/components/schemas/Circle'
          description: A circular geographic shape on the surface of the earth.
        outline_polygon:
          anyOf:
            - $ref: '#/components/schemas/Polygon'
          description: A polygonal geographic shape on the surface of the earth.
        altitude_lower:
          description: Minimum bounding altitude of this volume. Must be less than
            altitude_upper, if specified.
          anyOf:
            - $ref: '#/components/schemas/Altitude'
        altitude_upper:
          description: Maximum bounding altitude of this volume. Must be greater than
            altitude_lower, if specified.
          anyOf:
            - $ref: '#/components/schemas/Altitude'
 
    Volume4D:
      description: Contiguous block of geographic spacetime.
      required:
        - volume
        - time_start
        - time_end
      type: object
      properties:
        volume:
          $ref: '#/components/schemas/Volume3D'
        time_start:
          description: Beginning time of this volume. Must be before time_end.
          anyOf:
            - $ref: '#/components/schemas/Time'
        time_end:
          description: End time of this volume. Must be after time_start.
          anyOf:
            - $ref: '#/components/schemas/Time'
 
    ErrorResponse:
      description: |-
        Human-readable string returned when an error occurs
        as a result of a PSU - DSS transaction.
      type: object
      properties:
        message:
          description: |-
            Human-readable message indicating what error occurred and/or why.
          type: string
          example: The error occurred because [...]
 
    SubscriptionState:
      description: |-
        State of subscription which is causing a notification to be sent.
      required:
        - subscription_id
        - notification_index
      type: object
      properties:
        subscription_id:
          $ref: '#/components/schemas/SubscriptionID'
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
 
    SubscriptionNotificationIndex:
      format: int32
      description: Tracks the notifications sent for a subscription so the subscriber
        can detect missed notifications more easily.
      type: integer
      minimum: 0
      exclusiveMinimum: false
      default: 0
 
    UssBaseURL:
      description: |-
        The base URL of a PSU implementation of part or all of the PSU API. Per the PSU API, the full URL
        of a particular resource can be constructed by appending, e.g., `/psu/v1/{resource}/{id}` to this base URL.
        Accordingly, this URL may not have a trailing '/' character.
      type: string
      example: https://uam_psu.com/uam
 
    OperationalIntentState:
      description: |-
        State of an operational intent.
        'Accepted': Operational intent is created and shared, but not yet in use; see standard text for more details.
        The create or update request for this operational intent reference must include a Key containing all OVNs for
        all relevant Entities.
        'Activated': Operational intent is in active use; see standard text for more details.
        The create or update request for this operational intent reference must include a Key containing all OVNs for
        all relevant Entities.
        'Nonconforming': This operation is not conforming to its operational intent per the Community Based Rules (CBR). 
        The create or update request for this operational intent may omit a Key 
        in this case because the operational intent is being adjusted as flown and cannot necessarily deconflict.
        'Contingent': UA is considered unrecoverably unable to conform with its coordinate operational intent; see
        standard text for more details. 
        This state must transition to Ended.
        The create or update request for
        this operational intent may omit a Key in this case because the operational intent is being adjusted as flown 
        and cannot necessarily deconflict.
      type: string
      enum:
        - Accepted
        - Activated
        - Nonconforming
        - Contingent
 
    OperationalIntentReference:
      description: |-
        The high-level information of a planned or active operational intent with the URL
        of a PSU to query for details.  
        This information is sourced from the exchange between the PSU and the DSS
      required:
        - id
        - manager
        - uss_availability
        - version
        - state
        - time_start
        - time_end
        - uss_base_url
        - subscription_id
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityID'
        manager:
          type: string
          example: psu1
          description: |-
            Created by the DSS based on creating client's ID (via access token).  Used internal
            to the DSS for restricting mutation and deletion operations to manager.  Used by PSUs
            to reject operational intent update notifications originating from a PSU that does not manage
            the operational intent.
        uss_availability:
          $ref: '#/components/schemas/UssAvailabilityState'
        version:
          type: integer
          format: int32
          example: 1
          description: |-
            Numeric version of this operational intent which increments upon each change in the operational intent,
            regardless of whether any field of the operational intent reference changes.  A PSU with the
            details of this operational intent when it was at a particular version does not need to retrieve
            the details again until the version changes.
        state:
          $ref: '#/components/schemas/OperationalIntentState'
        ovn:
          description: |-
            Opaque version number of this operational intent.  Populated only when the OperationalIntentReference
            is managed by the PSU retrieving or providing it.  Not populated when the
            OperationalIntentReference is not managed by the PSU retrieving or providing it (instead, the
            PSU must obtain the OVN from the details retrieved from the managing PSU).
          anyOf:
            - $ref: '#/components/schemas/EntityOVN'
        time_start:
          description: Beginning time of operational intent. The estimated time at which the aircraft will
            commence movement associated with departure​ (ETD).
          externalDocs:
            description: See FIXM 4.2.0 for further information.
            url: https://www.fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_DepartureType.html#Link243 
          anyOf:
            - $ref: '#/components/schemas/Time'
        time_end:
          description: End time of operational intent. The estimated time at which the aircraft will arrive
            at the destination vertiport (ETA).
          anyOf:
            - $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/OperationalIntentUssBaseURL'
        subscription_id:
          description: |-
            The ID of the subscription that is ensuring the operational intent manager receives relevant
            airspace updates.
          anyOf:
            - $ref: '#/components/schemas/SubscriptionID'
 
    OperationalIntentUssBaseURL:
      description: |-
        The base URL of a PSU implementation that implements the parts of the PSU API necessary for
        providing the details of this operational intent, and telemetry during non-conformance or contingency,
        if applicable.
      anyOf:
        - $ref: '#/components/schemas/UssBaseURL'


    ConstraintReference:
      description: A ConstraintReference (area in which a constraint is present, along
        with other high-level information, but no details).  
        This information is based on the exchanges of the PSU with the DSS
      required:
        - id
        - manager
        - uss_availability
        - version
        - time_start
        - time_end
        - uss_base_url
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityID'
        manager:
          type: string
          example: psu1
          description: |-
            Created by the DSS based on creating client's ID (via access token).  Used internal
            to the DSS for restricting mutation and deletion operations to manager.  Used by PSUs
            to reject constraint update notifications originating from a PSU that does not manage
            the constraint.
        uss_availability:
          $ref: '#/components/schemas/UssAvailabilityState'
        version:
          type: integer
          format: int32
          example: 1
          description: |-
            Numeric version of this constraint which increments upon each change in the constraint,
            regardless of whether any field of the constraint reference changes.  A PSU with the
            details of this constraint when it was at a particular version does not need to retrieve
            the details again until the version changes.
        ovn:
          description: |-
            Opaque version number of this constraint.  Populated only when the ConstraintReference
            is managed by the PSU retrieving or providing it.  Not populated when the
            ConstraintReference is not managed by the PSU retrieving or providing it (instead, the
            PSU must obtain the OVN from the details retrieved from the managing PSU).
          anyOf:
            - $ref: '#/components/schemas/EntityOVN'
        time_start:
          $ref: '#/components/schemas/Time'
        time_end:
          $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/ConstraintUssBaseURL'
 
    ConstraintUssBaseURL:
      description: |-
        The base URL of a PSU implementation that implements the parts of the PSU API necessary for
        providing the details of this constraint.
      anyOf:
        - $ref: '#/components/schemas/UssBaseURL'

    #
    # PSU-PSU schema components
    # 
    OperationalIntentDetails:
      description: |-
        Details of a UAM operational intent. Note that this data is not stored in the DSS; only with the clients.
      required:
        - trajectory
      type: object
      properties:
        aircraft_registration:
          type: string
          pattern: "[A-Z0-9]{1,7}"
          description: |
            A unique, alphanumeric string that identifies a civil aircraft and consists of the Aircraft
            Nationality or Common Mark and an additional alphanumeric string, the registration mark,
            assigned by the state of registry or common mark registering authority. [FIXM]
          minLength: 1
          maxLength: 7
          x-uam-data-accessibility: PUBLIC
          externalDocs:
            description: See FIXM 4.2.0 for further information.
            url: https://fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_AircraftRegistrationType.html#LinkBC
        operator_name:
          description: The identifier of the UAM Operator. Required if different than the PSU. 
            For X4 this can be any code that meets the required pattern, and does not need to be
            an ICAO Airline Code.​
          type: string
          pattern: "[A-Z]{3}"
          example: "AAL" 
          externalDocs:
            description: See FIXM 4.2.0 for further information.
            url: https://www.fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_AircraftOperatorType.html#Link1E3
        trajectory:
          type: array
          minItems: 2
          maxItems: 1000
          description: |-
            The list of TrajectoryPoints for this operation.  This list must contain
            all significant TrajectoryPoints per the CBRs. For additional insight on 
            points to be included, see the enumeration of property types in the 
            TrajectoryPoint4D model.
          items:
            $ref: '#/components/schemas/TrajectoryPoint4D'
 
    OperationalIntent:
      description: Full description of a UAM operational intent.
      required:
        - reference
        - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/OperationalIntentReference'
        details:
          $ref: '#/components/schemas/OperationalIntentDetails'
 
    PutOperationalIntentDetailsParameters:
      description: |-
        Parameters of a message informing of detailed information for a peer operational intent.
        Pushed (by a client, not the DSS) directly to clients with subscriptions when
        another client makes a change to airspace within a cell with a subscription.
      required:
        - operational_intent_id
        - subscriptions
      type: object
      properties:
        operational_intent_id:
          description: ID of operational intent that has changed.
          anyOf:
            - $ref: '#/components/schemas/EntityID'
        operational_intent:
          description: |-
            Full information about the operational intent that has changed.  If this field is omitted,
            the operational intent was deleted.  The `ovn` field in the nested `reference` must be
            populated.
          anyOf:
            - $ref: '#/components/schemas/OperationalIntent'
        subscriptions:
          type: array
          description: Subscription(s) prompting this notification.
          items:
            $ref: '#/components/schemas/SubscriptionState'
          minItems: 1
 
    GetOperationalIntentDetailsResponse:
      description: Response to peer request for the details of operational intent
        with the given ID.
      required:
        - operational_intent
      type: object
      properties:
        operational_intent:
          $ref: '#/components/schemas/OperationalIntent'
 
    ConstraintDetails:
      description: Details of a UAM constraint. Note that this data is not stored
        in the DSS; only with the clients.
      required:
        - volumes
      type: object
      properties:
        volumes:
          description: |-
            Volumes that wholly contain the constraint while being as small as practical.
            The end time may not be in the past.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        type:
          description: |-
            Type of airspace feature this constraint represents.
          type: string
          example: com.example.non_utm_aircraft_operations
 
    Constraint:
      description: Full specification of a UAM constraint.
      required:
        - reference
        - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/ConstraintReference'
        details:
          $ref: '#/components/schemas/ConstraintDetails'
 
    PutConstraintDetailsParameters:
      description: Parameters of a message informing of new full information for a
        constraint.  Pushed (by a client, not the DSS) directly to clients with subscriptions
        when another client makes a change to airspace within a cell with a subscription.
      required:
        - constraint_id
        - subscriptions
      type: object
      properties:
        constraint_id:
          description: ID of constraint that has changed.
          anyOf:
            - $ref: '#/components/schemas/EntityID'
        constraint:
          description: |-
            Full information about the constraint that has changed.  If this field is omitted,
            the constraint was deleted.  The `ovn` field in the nested `reference` must be
            populated.
          anyOf:
            - $ref: '#/components/schemas/Constraint'
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
          minItems: 1
 
    GetConstraintDetailsResponse:
      description: |-
        Response to peer request for the details of constraint with the given ID.
      required:
        - constraint
      type: object
      properties:
        constraint:
          $ref: '#/components/schemas/Constraint'
 
    GetOperationalIntentTelemetryResponse:
      description: Response to a peer request for telemetry of an operational
        intent.
      required:
        - operational_intent_id
        - telemetry
      type: object
      properties:
        operational_intent_id:
          description: ID of the operational intent which the vehicle reporting telemetry
            is flying.
          anyOf:
          - $ref: '#/components/schemas/EntityID'
        telemetry:
          $ref: '#/components/schemas/VehicleTelemetry'
        next_telemetry_opportunity:
          description: |-
            The next telemetry similar to this telemetry is not expected to be
            available until at or after this time, so the polling PSU should
            generally not poll the endpoint providing this response data again
            until at or after that time.  If this field is omitted, then there
            is no current expectation of new telemetry becoming available.
          anyOf:
          - $ref: '#/components/schemas/Time'
 
    VehicleTelemetry:
      description: Vehicle position, altitude, and velocity.
      required:
        - time_measured
        - position
        - velocity
      type: object
      properties:
        time_measured:
          $ref: '#/components/schemas/Time'
        position:
          $ref: '#/components/schemas/Position'
        velocity:
          $ref: '#/components/schemas/Velocity'
        
    PositionAccuracyVertical:
      description: |-
        Vertical error that is likely to be present in this reported position.
        This is the GVA enumeration from ADS-B, plus some finer values for UAM vehicles.
      type: string
      enum:
        - VAUnknown
        - VA150mPlus
        - VA150m
        - VA45m
        - VA25m
        - VA10m
        - VA3m
        - VA1m
 
    PositionAccuracyHorizontal:
      description: |-
        Horizontal error that is likely to be present in this reported position.
        This is the NACp enumeration from ADS-B, plus 1m for a more complete range for UAM vehicles.
      type: string
      enum:
        - HAUnknown
        - HA10NMPlus
        - HA10NM
        - HA4NM
        - HA2NM
        - HA1NM
        - HA05NM
        - HA03NM
        - HA01NM
        - HA005NM
        - HA30m
        - HA10m
        - HA3m
        - HA1m
 
    TrajectoryPoint4D:
      description: |
        A point for use within a planned trajectory.
        Tolerance around the point is standardized, and will be applicable
        to all operations in a given area.
 
        Currently Flight Rule is not expected to change during an operation. If it does, the
        following may be added as a new property:
          https://fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_RouteTrajectoryElementType.html#Link2A3
      required:
        - lat_lng_point
        - altitude
        - time
        - speed
        - trajectory_property_array
      type: object
      properties:
        point_designator:
          description: The name of the designated point.
            This is required for all named airspace structure point from ASDS, including vertipads.
          type: string
          example: ee123
        lat_lng_point:
          description: Latitude and Longitude of the point. If this is for a named airspace structure 
            point from ASDS, it should be the same value as from ASDS.
          anyOf:
            - $ref: '#/components/schemas/LatLngPoint'
        altitude:
          description: Altitude of the point. If this is for a named airspace structure 
            point from ASDS, it should be the same value as from ASDS.
          anyOf:
            - $ref: '#/components/schemas/Altitude'  
        time:
          description: |-
            Estimated time when the vehicle will be at the location of the TrajectoryPoint
          $ref: '#/components/schemas/Time'
        speed:
          description: |-
            Speed of the vehicle at this TrajectoryPoint.
            FIXM allows for two speed entries:  predictedAirspeed and predictedGroundspeed
          anyOf:
            - $ref: '#/components/schemas/Velocity'
        trajectory_property_array:
          description: |-
            Describes any applicable properties of the trajectory point.
            May include multiple properties per point. FIXM allows up to 2000 properties per
            trajectory point. For X4 we are allowing up to 4.
            The first point of initial plan must include at a minimum: AIRPORT_REFERENCE_LOCATION, WHEELS_OFF
            The last point must include at a minimum: AIRPORT_REFERENCE_LOCATION, WHEELS_ON
            A named airspace structure point from ASDS must include at a minimum: WAYPOINT
            If the airspace structure point has a SchedulingType, it must be included as follows:
              SchedulingType enum   |   Property enum
              Entry                 |   ENTRY_CORRIDOR
              Exit                  |   EXIT_CORRIDOR
              Crossing              |   CROSSING_TRACK
              Merge                 |   MERGE_TRACK
          type: array
          minItems: 1
          maxItems: 4
          items:
            $ref: '#/components/schemas/TrajectoryProperty'
          externalDocs:
            url: https://fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_TrajectoryPoint4DType.html#Link2AC                   
      externalDocs:
        description: See FIXM 4.2.0 for further information.
        url: https://www.fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_TrajectoryPoint4DType.html#Link116     
 
    TrajectoryProperty:
      description: Describes any applicable properties of the trajectory point.
      type: object
      required:
        - property_type
      properties:
        property_type:
          description: |
            Provides the type of trajectory point property. Enum list is based on the FIXM definition
            of TrajectoryPointPropertyType.
          type: string
          enum:
            - TOP_OF_CLIMB
            - TOP_OF_DESCENT
            - TCP_VERTICAL
            - TCP_SPEED
            - TCP_LATERAL
            - WHEELS_OFF
            - WHEELS_ON
            - AIRPORT_REFERENCE_LOCATION
            - WAYPOINT
            - ENTRY_CORRIDOR
            - EXIT_CORRIDOR
            - CROSSING_TRACK
            - MERGE_TRACK
          externalDocs:
            description: FIXM definition of TrajectoryPointPropertyType
            url: https://fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_TrajectoryPointPropertyType.html#Link2B0
 
    Position:
      description: |-
        Location of the UAM vehicle as reported for UAM.
        Note: 'accuracy' values are required when extrapolated field is true.
      type: object
      required:
        - longitude
        - latitude
        - altitude
      properties:
        longitude:
          $ref: '#/components/schemas/Longitude'
        latitude:
          $ref: '#/components/schemas/Latitude'
        accuracy_h:
          $ref: '#/components/schemas/PositionAccuracyHorizontal'
        accuracy_v:
          $ref: '#/components/schemas/PositionAccuracyVertical'
        extrapolated:
          description: |-
            True if this position was generated primarily by computation
            rather than primarily from a direct instrument measurement.
          type: boolean
          default: false
        altitude:
          $ref: '#/components/schemas/Altitude'
 
    Velocity:
      description: |-
        Velocity of the associated vehicle at the time_measured.
      required:
        - speed
        - units_speed
      type: object
      properties:
        speed:
          format: float
          type: number
          description: |-
            Speed numerical value.
          example: 200.1
        units_speed:
          type: string
          enum:
            - MetersPerSecond
            - Knots
        track:
          format: float
          type: number
          description: |-
            Direction of flight expressed as a "True North-based" ground track angle.
            This value is provided in degrees East of North with a minimum resolution of 1 degree.
            A value of 360 indicates invalid, no value, or unknown.
          example: 120
          default: 0
        speed_type:
          description: |-
            Air speed or ground speed
          type: string
          enum:
            - GROUND
            - AIR
          default: GROUND

    UssAvailabilityStatus:
      type: object
      required:
      - uss
      - availability
      properties:
        uss:
          type: string
          description: |-
            Client ID (matching their `sub` in access tokens) of the USS to which this availability applies.
        availability:
          $ref: '#/components/schemas/UssAvailabilityState'

    UssAvailabilityState:
      type: string
      enum:
      - Unknown
      - Normal
      - Down
      description: |-
        A PSU is presumed to be in the Unknown state absent indication otherwise by a PSU with
        availability arbitration scope.  Upon determination via availability arbitration, a PSU is
        Down when it does not respond appropriately, and a Down PSU may not perform the following
        operations in the DSS:
          * Create an operational intent in the Accepted or Activated states
          * Modify an operational intent whose new or unchanged state is Accepted or Activated
          * Delete an operational intent
        A PSU in the Unknown state possesses all the capabilities, within the DSS, of a PSU in the
        Normal state.

    #
    # Data structures for logging
    #
    ExchangeRecord:
      type: object
      description: Details of a request/response data exchange.
      required:
      - url
      - method
      - recorder_role
      - request_time
      - request_source
      properties:
        url:
          type: string
          description: Full URL of request.
        method:
          type: string
          description: HTTP verb used by requestor (e.g., "PUT," "GET," etc.).
        headers:
          description: |-
            Set of headers associated with request or response. Requires 'Authorization:' field (at a minimum)
          type: array
          items:
            type: string
          default: []
        recorder_role:
          type: string
          description: |-
            A coded value that indicates the role of the logging PSU: 'Client' (initiating a request to a remote PSU) or 'Server' (handling a request from a remote PSU)
          enum:
          - Client
          - Server
        request_time:
          description: The time at which the request was sent/received.
          anyOf:
          - $ref: '#/components/schemas/Time'
        request_body:
          description: Base64-encoded body content sent/received as a request.
          type: string
          default: ''
        response_time:
          description: The time at which the response was sent/received.
          anyOf:
          - $ref: '#/components/schemas/Time'
        response_body:
          type: string
          default: ''
          description: Base64-encoded body content sent/received in response to request.
        response_code:
          type: integer
          format: int32
          default: 0
          description: HTTP response code sent/received in response to request.
        problem:
          type: string
          description: Human-readable description of the problem with the exchange,
            if any.

    ErrorReport:
      type: object
      description: A report informing a server of a communication problem.
      required:
      - exchange
      properties:
        report_id:
          type: string
          maxLength: 128
          description: ID assigned by the server receiving the report.  Not populated
            when submitting a report.
        exchange:
          anyOf:
          - $ref: '#/components/schemas/ExchangeRecord'
          description: The request (by this PSU) and response associated with the
            error.

paths:
  #
  # PSU Endpoint: OPERATIONAL INTENTS
  #

  /psu/v1/operational_intents/{entityid}:
    summary: Query detailed information of an operational intent from a PSU.
    parameters:
      - name: entityid
        description: EntityID for this operational intent.
        schema:
          $ref: '#/components/schemas/EntityID'
        in: path
        required: true

    get:
      tags:
        - Operational intent details
        - p2p_uam
      security:
        - Authority:
            - utm.strategic_coordination
      summary: Retrieve the specified operational intent details from a PSU.
      description: |-
        The PSU hosting this endpoint returns the details (and reference) of an
        operational intent it manages.  While the PSU has a pending request to change the
        operational intent in the DSS, the PSU should report the most recent version the
        PSU knows was accepted by the DSS.  So, before a PSU receives a response
        to create an operational intent reference in the DSS, it should return 404 if
        queried for that operational intent at this endpoint.
      operationId: getOperationalIntentDetails
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationalIntentDetailsResponse'
          description: Operational intent details were retrieved successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.
 
  /psu/v1/operational_intents/{entityid}/telemetry:
    summary: Detailed information on the position of an operational intent.
    parameters:
      - name: entityid
        description: EntityID for this operational intent.
          The 'entityid' http request URL parameter is the ID of the
            Operation for which telemetry data is requested.
        schema:
          $ref: '#/components/schemas/EntityID'
        in: path
        required: true
 
    get:
      tags:
        - Operational intent details
        - p2p_uam
      security:
        - Authority:
            - utm.conformance_monitoring_sa
      summary: Query detailed information on the position of an operational
        intent from a PSU.
      operationId: getOperationalIntentTelemetry
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationalIntentTelemetryResponse'
          description: OperationalIntent telemetry details were retrieved successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        '412':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No telemetry data is available.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operational intent is not in a state that provides telemetry.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.
 
  /psu/v1/operational_intents:
    summary: A PSU's representation of detailed information about operational intents.
 
    post:
      tags:
        - Operational intent details
        - p2p_uam
      security:
        - Authority:
            - utm.strategic_coordination
      summary: Notify a peer PSU of changed operational intent details.
      operationId: notifyOperationalIntentDetailsChanged
      description: Notify a peer PSU directly of changed operational intent details 
        (usually as a requirement of previous interactions with the DSS).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutOperationalIntentDetailsParameters'
        required: true
      responses:
        '204':
          description: New or updated full operational intent information received
            successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the manager of this Entity according to the receiving client's records.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.
 
  #
  # PSU Endpoint: CONSTRAINTS
  #
 
  /psu/v1/constraints/{entityid}:
    summary: Query detailed information of a constraint from a PSU.
    parameters:
      - name: entityid
        description: EntityID of the constraint.
        schema:
          $ref: '#/components/schemas/EntityID'
        in: path
        required: true
 
    get:
      tags:
        - Constraint details
        - p2p_uam
      security:
        - Authority:
            - utm.constraint_processing
      summary: Retrieve the specified constraint details from a PSU.
      operationId: getConstraintDetails
      description: |-
        The PSU hosting this endpoint returns the details (and reference) of a
        constraint it manages.  While the PSU has a pending request to change the
        constraint in the DSS, the PSU should report the most recent version the
        PSU knows was accepted by the DSS.  So, before a PSU receives a response
        to create a constraint reference in the DSS, it should return 404 if
        queried for that constraint at this endpoint.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConstraintDetailsResponse'
          description: Constraint details were retrieved successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.
 
  /psu/v1/constraints:
    summary: A PSU's representation of detailed information about constraints.
 
    post:
      tags:
        - Constraint details
        - p2p_uam
      security:
        - Authority:
            - utm.constraint_management
      summary: Notify a peer PSU of changed constraint details.
      operationId: notifyConstraintDetailsChanged
      description: Notify a peer PSU directly of changed constraint details (usually
        as a requirement of previous interactions with the DSS).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutConstraintDetailsParameters'
        required: true
      responses:
        '204':
          description: New or updated full constraint information received successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the manager of this Entity according to the receiving client's records.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.
 
  #
  # PSU Endpoint: REPORT
  #
 
  /psu/v1/reports:
    summary: Error reports of issues communicating with a peer PSU.
      This endpoint is not exercised in X4.
 
    post:
      tags:
        - Reports
        - p2p_uam
      security:
        - Authority:
          - utm.strategic_coordination
        - Authority:
          - utm.constraint_processing
        - Authority:
          - utm.constraint_management
        - Authority:
          - utm.conformance_monitoring_sa
        - Authority:
          - utm.availability_arbitration
      summary: Notify PSU of an error encountered that might otherwise go unnoticed.
      operationId: makePsuReport
      description: Endpoint to provide feedback (errors, etc.) that might otherwise
        go unnoticed by this PSU.  This endpoint is used for all feedback related
        to operational intents and constraints.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorReport'
        required: true
      responses:
        '201':
          description: Report received and successfully archived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The report could not be parsed, or contains unrecognized data.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.
