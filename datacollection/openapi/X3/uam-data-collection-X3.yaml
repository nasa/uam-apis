openapi: 3.0.0
info:
  description: |-
    Data Pipeline Endpoints for X3 - includes endpoints Scenario 1, 2 and 3
  version: "1.0.3"
  title: Data Pipeline Endpoints for X3

paths:
  /waypoint:
      post:
        summary: Upload an array of the Waypoint models
        responses:
            '200':
              $ref: '#/components/responses/r200'
            '204':
              $ref: '#/components/responses/r204'
            '400':
              $ref: '#/components/responses/r400'
            '401':
              $ref: '#/components/responses/r400'
            '403':
              $ref: '#/components/responses/r403'
            '409':
              $ref: '#/components/responses/r409'
            '429':
              $ref: '#/components/responses/r429'
            '500':
              $ref: '#/components/responses/r500'
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Waypoint'
          description: Upload array of Waypoint models
          required: true

  /psu-exchange:
    post:
      summary: Upload an array of PSUExchange models
      responses:
        '200':
          $ref: '#/components/responses/r200'
        '204':
          $ref: '#/components/responses/r204'
        '400':
          $ref: '#/components/responses/r400'
        '401':
          $ref: '#/components/responses/r400'
        '403':
          $ref: '#/components/responses/r403'
        '409':
          $ref: '#/components/responses/r409'
        '429':
          $ref: '#/components/responses/r429'
        '500':
          $ref: '#/components/responses/r500'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PSUExchange'
        description: Upload an object of models, containing array of psu exchange
        required: true

  /metadata:
    post:
      summary: Upload an array of FlightRunMetadata models
      responses:
        '200':
          $ref: '#/components/responses/r200'
        '204':
          $ref: '#/components/responses/r204'
        '400':
          $ref: '#/components/responses/r400'
        '401':
          $ref: '#/components/responses/r400'
        '403':
          $ref: '#/components/responses/r403'
        '409':
          $ref: '#/components/responses/r409'
        '429':
          $ref: '#/components/responses/r429'
        '500':
          $ref: '#/components/responses/r500'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FlightRunMetadata'
        description: Upload an object of models, containing array of flight run metadata
        required: true

  /constraint-occurrence:
    post:
      summary: Upload an array of ConstraintOccurrence models
      responses:
        '200':
          $ref: '#/components/responses/r200'
        '204':
          $ref: '#/components/responses/r204'
        '400':
          $ref: '#/components/responses/r400'
        '401':
          $ref: '#/components/responses/r400'
        '403':
          $ref: '#/components/responses/r403'
        '409':
          $ref: '#/components/responses/r409'
        '429':
          $ref: '#/components/responses/r429'
        '500':
          $ref: '#/components/responses/r500'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ConstraintOccurrence'
        description: Upload an object of models, containing array of constraint occurrence
        required: true

  /off-nominal-response:
    post:
      summary: Upload an array of OffNominalResponse models
      responses:
        '200':
          $ref: '#/components/responses/r200'
        '204':
          $ref: '#/components/responses/r204'
        '400':
          $ref: '#/components/responses/r400'
        '401':
          $ref: '#/components/responses/r400'
        '403':
          $ref: '#/components/responses/r403'
        '409':
          $ref: '#/components/responses/r409'
        '429':
          $ref: '#/components/responses/r429'
        '500':
          $ref: '#/components/responses/r500'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OffNominalResponse'
        description: Upload an object of models, containing array of OffNominalResponse
        required: true

  /auxiliary-operation:
    post:
      summary: Upload an array of AuxiliaryOperation models
      responses:
        '200':
          $ref: '#/components/responses/r200'
        '204':
          $ref: '#/components/responses/r204'
        '400':
          $ref: '#/components/responses/r400'
        '401':
          $ref: '#/components/responses/r400'
        '403':
          $ref: '#/components/responses/r403'
        '409':
          $ref: '#/components/responses/r409'
        '429':
          $ref: '#/components/responses/r429'
        '500':
          $ref: '#/components/responses/r500'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AuxiliaryOperation'
        description: Upload an object of models, containing array of AuxiliaryOperation
        required: true

  /con-pre-run-op:
    post:
      summary: Upload an array of ConPreRunOp models
      responses:
        '200':
          $ref: '#/components/responses/r200'
        '204':
          $ref: '#/components/responses/r204'
        '400':
          $ref: '#/components/responses/r400'
        '401':
          $ref: '#/components/responses/r400'
        '403':
          $ref: '#/components/responses/r403'
        '409':
          $ref: '#/components/responses/r409'
        '429':
          $ref: '#/components/responses/r429'
        '500':
          $ref: '#/components/responses/r500'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ConPreRunOp'
        description: Upload an object of models, containing array of ConPreRunOp
        required: true

components:
  schemas:
    Timestamp:
      description: >-
        Timestamps are validated against the ECMA 262 regex defined for 'pattern'.
        Note that this format specifies UTC time indicated by a trailing 'Z'.
        Note that this format specifies date and time separation with a 'T'.
      type: string
      format: date-time
      minLength: 24
      maxLength: 24
      pattern: "^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]{1,3})?Z$"
      example: '2015-08-20T14:11:56.118Z'

    LatLonAlt:
      type: object
      required:
        - latitude
        - longitude
        - altitude
      description: >-
        Object used to define a location. Latitude and Longitude should have precision of 7 or more digits. WGS84 altitude. (m)
      properties:
        latitude:
          description: >-
            Degrees of latitude north of the equator, with reference to the WGS84 ellipsoid. Should have precision of 7 or more digits.
          type: number
          format: double
        longitude:
          description: >-
            Degrees of longitude east of the Prime Meridian, with reference to the WGS84 ellipsoid. Should have precision of 7 or more digits.
          type: number
          format: double
        altitude:
          description: >-
            The numeric value of the WGS84 altitude. (m)
          type: number
          format: double

    UTMRestResponse:
      type: object
      required:
        - http_status_code
        - message
      properties:
        http_status_code:
          type: integer
          minimum: 100
          exclusiveMinimum: false
          maximum: 599
          exclusiveMaximum: false
        message:
          type: string
          maxLength: 500
      example:
        http_status_code: 400
        message: Bad Request. Invalid JSON?

    PSUExchange:
        required:
          - "exchanged_data_pk"
          - "exchanged_data_type"
          - "version_number"
          - "source_psu"
          - "target_psu"
          - "reporting_psu_role"
          - "time_request_initiation"
          - "time_request_completed"
          - "actual_http_response"
          - "endpoint"
          - "http_method"
        description: >-
          This model captures performance and interoperability data for a PSU. Since only failure case data is included in the PSU network 'Report' model, it is important to have PSUs self report on nominal elements. This information may inform future performance requirements and forensics of certain incidents. This may be an initial model that will be required operationally in terms of a PSUs need to log interactions with other PSUs.
        properties:
          FRI:
            description: >-
              	Array of Flight Test Run Identifiers, autogenerated by subsystem, in this case partner PSU while submitting flight-run-metadata to NASA Data Pipeline subsystem.
            type: array
            items:
              type: string
              format: uuid
              maxLength: 36
              minLength: 36
              pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[8-9a-bA-B][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
              example: "00000000-0000-4444-8888-FEEDDEADBEEF"
          exchanged_data_pk:
            description: >-
              	The primary key of the data that were exchanged. For example, if an Operation, Constraint, or Telemetry was exchanged, then this field would contain the reference ID.

                In the case that multiple data elements were exchanged, then just populate this field with one of the primary keys. As a best practice, choose the first one in the array as they were sent between PSUs.

                In the case where there is no Operation, Constraint, Telemetry, or reference ID, use 00000000-0000-4000-?000-000000000000 where ? is 8, 9, A, or B.
            type: string
            format: uuid
            maxLength: 36
            minLength: 36
            pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[8-9a-bA-B][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
            example: "00000000-0000-4444-8888-FEEDDEADBEEF"
          exchanged_data_type:
            description: >-
              The data model that is being exchanged. For ‘TELEMETRY’, this model is only provided for the GET endpoint exchanges.
            type: "string"
            enum:
              - OPERATION
              - TELEMETRY
              - CONSTRAINT
              - SUBSCRIPTIONS
              - REPORT
              - OTHER_SEE_COMMENT
            example: "TELEMETRY"
          version_number:
            description: >-
              The version number of the model that was sent. For Operation and Constraint.

              Use 0 if model does not include a version, such as for Telemetry.
            type: "integer"
            example: 4
          source_psu:
            description: >-
              This is the base url of the source_psu, or discovery.
            type: "string"
            example: "psu.provider123.net"
          target_psu:
            description: >-
              This is the base url of the target_psu, or discovery.
            type: "string"
            example: "psu.provider456.net"
          reporting_psu_role:
            description: >-
              An enum indicating if the PSU providing these data was the one that initiated the request (source_psu) or the PSU that received the request (target_psu).
            type: "string"
            enum:
              - SOURCE_PSU
              - TARGET_PSU
            example: "SOURCE_PSU"
          time_request_initiation:
            description: >-
              If SOURCE_PSU, this is the time that the request is sent to the TARGET_USS.
              If TARGET_PSU, this is the time that the request was received from the SOURCE_PSU.
              Must be less than time_request_completed.
            $ref: '#/components/schemas/Timestamp'
          time_request_completed:
            description: >-
              If SOURCE_PSU, this is the time that the response was received from the TARGET_PSU.
              If TARGET_PSU, this is the time that the request was sent back to the SOURCE_PSU.
              Must be greater than time_request_initiation.
            $ref: '#/components/schemas/Timestamp'
          endpoint:
            description: >-
              The endpoint to which the data request was initially sent.
            type: "string"
            example: "https://psu.provider456.net/operations"
          http_method:
            description: >-
              The HTTP method used in this exchange.
            type: string
            enum:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
              - TRACE
              - OPTIONS
              - CONNECT
              - PATCH
            example: "PUT"
          expected_http_response:
            description: >-
              The expected HTTP response code.
              This is required ONLY if the reporting_psu_role is source_psu.
            type: "integer"
            minimum: 100
            maximum: 599
            example: 204
          actual_http_response:
            description: >-
              The actual HTTP response code sent by the target_psu to the source_psu.
              Must be reported by USSs in either role.
            type: "integer"
            minimum: 100
            maximum: 599
            example: 204
          comments:
            description: >-
              Any additional comments that could aid in analysis involving these data.
            type: "string"
            maxLength: 1000
            example: "This test was good."

    Waypoint:
        description: A single waypoint with associated data.
        required:
          - id
          - sequence_id
          - waypoint_type
          - waypoint_phase
          - waypoint_location
          - target_time
          - target_ground_speed
          - target_vertical_speed
          - hover_duration
        properties:
          FRI:
            description: >-
              	Flight Test Run Identifier, autogenerated by subsystem, in this case partner PSU while submitting flight-run-metadata to NASA Data Pipeline subsystem.
            type: string
            format: uuid
            maxLength: 36
            minLength: 36
            pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[8-9a-bA-B][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
            example: "00000000-0000-4444-8888-FEEDDEADBEEF"
          id:
            description: >-
                Universally-unique identifier for an Operation. This is the same value used in the 'id' fields in the Operation data.
            type: string
            format: uuid
            maxLength: 36
            minLength: 36
            pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[8-9a-bA-B][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
            example: "00000000-0000-4444-8888-FEEDDEADBEEF"
          sequence_id:
            description: >-
              	Integer indicating order of this waypoint in the list of waypoints.
                Provides the sequence of waypoints for the operation. The sequence
                IDs for an operations waypoints must start at 1. Sequence IDs may
                not be repeated and there there may be no gaps in the sequence IDs
                for an operations waypoints. If an Operations waypoints are updated
                with subsequent submissions of waypoints to this endpoint, sequence
                IDs that already exist will be updated, and new sequence IDs will be added.
            type: integer
            format: int32
            minimum: 1
            maximum: 9999
            example: 23
          waypoint_type:
            description: Fly over or fly by?
            type: string
            enum:
              - FLY_BY
              - FLY_OVER
          waypoint_phase:
            description: >-
              Phase of flight that the operation will be in at this waypoint. Climb or Descent implies that the vehicle is traveling with some lateral air speed while descending. Vertical implies no lateral speed.
            type: string
            enum:
              - GROUND_TAXI
              - GROUND_HOVER
              - TAKEOFF
              - CLIMB_VERTICAL
              - CLIMB
              - CRUISE
              - DESCENT_VERTICAL
              - DESCENT
              - APPROACH
              - LANDING
          waypoint_location:
            description: >-
              For Lat/Lon, report at least seven decimal degrees. (deg)
              For Alt, express in WGS84 standard. (m)
            $ref: '#/components/schemas/LatLonAlt'
          target_time:
            description: |-
              Targeted time to reach this waypoint.  Cannot be repeated
              anywhere in its waypoint sequence. Times MUST be in the same order as
              their sequence ids.
            $ref: '#/components/schemas/Timestamp'
          target_air_speed:
            description: >-
              The target air speed of the vehicle at this waypoint.
              Units of measure: m/sec.
            type: integer
            format: int32
            minimum: -9999
            maximum: 9999
            example: 32
          target_ground_speed:
            description: >-
              The target ground speed of the vehicle at this waypoint.
              Units of measure: m/sec.
            type: integer
            format: int32
            minimum: 0
            maximum: 9999
            example: 32
          target_vertical_speed:
            description: >-
              For climb and descent waypoints, the target speed of climb or descent
              Units of measure: m/sec.
            type: integer
            format: int32
            minimum: -9999
            maximum: 9999
            example: 32
          hover_duration:
            description: >-
              Number of seconds the vehicle plans to hover or loiter at this waypoint.
            type: integer
            format: int32
            minimum: 0
            maximum: 99999
            example: 120

    FlightRunMetadata:
        description: >-
          This interface allows all the subsystems to setup context for a
          flight test run. As part of this interface the identifier
          FRI (Flight Run Identifier) is generated.   FRI will be embedded into every
          interface data model exchanged between subsystems. Industry partner
          PSU subsystem that include PSU operator capabilities shall submit data
          as per the data model mentioned in Table-3 to Data Pipeline.

          This model is submitted after Operation enters 'Ended' state.

          The only fields that are allowed to change in updates are Operation_IDs, and call_sign, and once call sign has been set in an update, it is “frozen”.

        required:
          - FRI
          - FRI_tag
          - flight_type
          - flight_test_run_date_time
          - industry_partner_name
          - test_id
          - scenario_id
          - PSU_url
          - crew
        properties:
          FRI:
            description: >-
                Flight Test Run Identifier, autogenerated by subsystem, in this case partner PSU while submitting flight-run-metadata to NASA Data Pipeline subsystem.
            type: string
            format: uuid
            maxLength: 36
            minLength: 36
            pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[8-9a-bA-B][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
            example: "00000000-0000-4444-8888-FEEDDEADBEEF"
          FRI_tag:
            description: >-
              A tag that can group multiple UAM aircrafts (simulated/real) flight test runs.
            type: string
          flight_type:
            description: >-
                Distinguishes flight test types.
            type: string
            enum:
              - AIRSPACE_SIMULATION
              - FLIGHT_SIMULATION
              - LIVE_FLIGHT
          flight_test_run_date_time:
            description: Timestamp information about the start of the flight test event run.
            $ref: '#/components/schemas/Timestamp'
          industry_partner_name:
            description: >-
              Name of the industry partner
            type: string
          test_id:
            description: >-
                Distinguishes the event by ID.
            type: string
            enum:
              - X3
              - X4
              - VIRTUAL_DRY_RUN
              - BUILDUP_RUN_1
              - BUILDUP_RUN_2
              - BUILDUP_RUN_3
              - DT
          test_description:
            description: >-
              Description of the test like Connectivity test, demonstration, actual test etc..
            type: string
          scenario_id:
            description: >-
                Distinguishing NC Scenarios.
            type: string
            enum:
              - SCENARIO_1
              - SCENARIO_2
              - SCENARIO_3
          call_sign:
            description: >-
              Unique call sign used to communicate with operators. The call sign will be captured in the communication audio while executing the flight test.
            type: string
          Operation_IDs:
            description: >-
              An array of operations been submitted as part of the FRI. This array shall be updated individually by POST requests if new operations were submitted as part of the FRI.
            type: array
            items:
              type: string
              format: uuid
              maxLength: 36
              minLength: 36
              pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[8-9a-bA-B][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
              example: "00000000-0000-4444-8888-FEEFEEBEAFEE"
          PSU_url:
            description: >-
              Partner PSU URL
            type: string
          crew:
            description: >-
              The crew.
            type: array
            items:
              $ref: '#/components/schemas/CrewMember'

    CrewMember:
        description: >-
          Information pretaining to the member of a crew.
        required:
          - role
        properties:
          name:
            description: >-
                Name of the individual crew member
            type: string
            example: "Skipper Tanner"
          role:
            description: >-
                Role of the individual crew member
            type: string
          email:
            description: >-
                Email of the individual crew member
            type: string

    ConstraintOccurrence:
      description: >-
        This model captures the enactment of a Constraint from the
        perspective of PSU to operator interaction.  The goal is to capture how
        PSUs inform operators and how those operators react.  These data will
        be correlated with data captured via the PSU Network.
      required:
        - id
        - constraint_id
        - time_psu_received
        - time_psu_sent
        - time_response_from_operator_received
        - message_protocol
      properties:
        id:
          description: >-
            Universally-unique identifier for an Operation. This is the same value used in the 'id' fields in the Operation data
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[8-9a-bA-B][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
          example: "00000000-0000-4444-8888-FEEDDEADBEEF"
        constraint_id:
          description: >-
            EntityUUID of the Constraint this exchange is in reference too
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[8-9a-bA-B][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
          example: "00000000-0000-4444-8888-FEEDDEADBEEF"
        time_psu_received:
          description: >-
            The time that the PSU received the Constraint message describing
            this dynamic restriction.
          $ref: '#/components/schemas/Timestamp'
        time_psu_sent:
          description: >-
            The time that the PSU sent a message to an affected operation.
          $ref: '#/components/schemas/Timestamp'
        time_response_from_operator_received:
          description: >-
            The time that the PSU receives acknowledgement that the message was
            received.  If an HTTP exchange this would be the time that the
            20X was received.  If some other exchange mechanism, then just the
            time that acknowledgement was received.
          $ref: '#/components/schemas/Timestamp'
        message_protocol:
          description: >-
            How is the message sent to the operator?  If 'OTHER' you must describe
            in 'notes' field.  May expand this enumeration based on discussions
            with partners.
          type: string
          enum:
            - HTTP
            - WEBSOCKETS
            - EMAIL
            - SMS
            - OTHER
        message_to_operator:
          description: >-
            The actual data payload sent to the operator from the PSU. May be
            difficult to apply a maxLength to this field, should discuss.

            This may be JSON formatted, so proper escaping of certain chars may
            be necessary.  It may make sense to base64 encode this.  Should discuss.
          type: string
        notes:
          description: >-
            Additional details about the exchange and/or message protocol. This may
            include the actual data payload sent to the operator from the PSU.
          type: string

    OffNominalResponse:
      description: >-
        This model captures the response to an off nominal event from the perspective
        of the operator.
      type: object
      required:
        - id
        - response_time
        - response_value
        - landing_location
      properties:
        id:
          description: >-
            Universally-unique identifier for an Operation. This is the same value used in the 'id' fields in the Operation data
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[8-9a-bA-B][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
          example: "00000000-0000-4444-8888-FEEDDEADBEEF"
        response_time:
          description: >-
            Time at which the operator alerts the PSU of the response to the off
            nominal event
          $ref: '#/components/schemas/Timestamp'
        response_value:
          description: >-
            The response to the off nominal event
          type: string
          enum:
            - GO_AROUND_INITIATED
            - ALTERNATE_LANDING_INITIATED
            - CONTINGENT_INITIATED
        landing_location:
          description: >-
            Revised landing location as a result of the off nominal event
            For Lat/Lon, report at least seven decimal degrees. (deg)
            For Alt, express in WGS84 standard. (m)
          $ref: '#/components/schemas/LatLonAlt'

    AuxiliaryOperation:
      description: >-
        This model captures operation data post flight that is not specifically included in the PSU Network Operation model.
      required:
        - id
        - takeoff_time
        - landing_time
      properties:
        id:
          description: >-
            Universally-unique identifier for an Operation. This is the same value used in the 'id' fields in the Operation data
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[8-9a-bA-B][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
          example: "00000000-0000-4444-8888-FEEDDEADBEEF"
        takeoff_time:
          description: >-
            The time the operation first becomes airborne
          $ref: '#/components/schemas/Timestamp'
        landing_time:
          description: >-
            The time the operation lands
          $ref: '#/components/schemas/Timestamp'
        traffic_interactions:
          description: >-
            Number of distinct IFR or VFR vehicles that came within 1 nmi lateral and 1500 ft vertical of the operation at any point of an operations flight
          type: integer
          format: int32
          minimum: 0
          maximum: 9999
          example: 32

    ConPreRunOp:
      type: object
      required:
        - id
        - plannedTakeoffLocation
        - plannedLandingLocation
        - alternateLandingLocations
      properties:
        id:
          description: >-
            Universally-unique identifier for an Operation. This is the same value used in the 'id' fields in the Operation data
          type: string
          format: uuid
          maxLength: 36
          minLength: 36
          pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[8-9a-bA-B][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
          example: "00000000-0000-4444-8888-FEEDDEADBEEF"
        plannedTakeoffLocation:
          description: >-
            For Lat/Lon, report at least seven decimal degrees. (deg)
            For Alt, express in WGS84 standard. (m)
          $ref: '#/components/schemas/LatLonAlt'
        plannedLandingLocation:
          description: >-
            For Lat/Lon, report at least seven decimal degrees. (deg)
            For Alt, express in WGS84 standard. (m)
          $ref: '#/components/schemas/LatLonAlt'
        alternateLandingLocations:
          description: >-
            Planned landing locations in case of a contingency
          type: array
          items:
            $ref: '#/components/schemas/LatLonAlt'
          minItems: 1
          maxItems: 10000

  responses:

    'r200':
      description: okay
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UTMRestResponse'

    'r201':
      description: data created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UTMRestResponse'

    'r204':
      description: no response supplied

    'r400':
      description: Bad request. Typically validation error. Fix your request and retry.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UTMRestResponse'

    'r401':
      description: Invalid or missing access_token provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UTMRestResponse'

    'r403':
      description: >-
        Forbidden. Do not retry with same access token. Reason not provided,
        but do you have the right scopes? Does uss_name match the sub claim?
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UTMRestResponse'

    'r409':
      description: Conflict for a PUT that is unsuccessful due to a 3rd-party modification
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UTMRestResponse'

    'r429':
      description: Too many recent requests from you. Wait to make further queries.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UTMRestResponse'

    'r500':
      description: Internal Server Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UTMRestResponse'
