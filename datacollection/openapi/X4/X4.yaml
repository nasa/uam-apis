---
openapi: 3.0.3
info:
  title: X4 UAM API (PSU->DSS and PSU->PSU)
  version: 0.0.1
  description: |-
    Interface definitions for 'Discovery and Synchronization Service' (DSS) and 'Provider of Services UAM' (PSU).
    DSS functionality includes identification of peer UAM PSU instances (managing flight operations and constraints).
    USS functionality includes sharing details of flight operations and constraints.
    Note: Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
    Note: Version 0.3.5 Commit 742454c of the ASTM UTM API was used as starting point for editing this API. To simply compares with that version of the ASTM API, the terms 'USS' and 'UTM' will not be changed to 'PSU' and 'UAM' respectively in the following sections unless necessary.

security:
  - Authority:
      - utm.strategic_coordination
      - utm.constraint_management
      - utm.constraint_consumption

tags:
  - name: "Operation references"
    description: |-
      Endpoints exposed by the DSS for interaction with references to Operations.
  - name: "Operation details"
    description: |-
      Endpoints exposed by PSUs for interaction with details of Operations.
  - name: "Constraint references"
    description: |-
      Endpoints exposed by the DSS for interaction with references to Constraints.
  - name: "Constraint details"
    description: |-
      Endpoints exposed by USS/PSUs for interaction with details of Constraints.
  - name: "Subscriptions"
    description: |-
      Endpoints exposed by the DSS for interaction with Subscription entities.
  - name: "Reports"
    description: |-
      Endpoints exposed by the DSS for reporting peer DSS issues.
  - name: dss
    description: Endpoints exposed by the DSS server.
  - name: p2p_utm
    description: Endpoints exposed by UTM USSs for peer-peer communication.


#
#
#

components:
  securitySchemes:
    Authority:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://token_vendor.com/oauth/token
          scopes:
            utm.strategic_coordination: |-
              Client may perform planning, strategic conflict detection, and conformance monitoring activities, including reading information about Constraints.
            utm.constraint_management: |-
              Client may manage (create, edit, and delete) Constraints they own.
            utm.constraint_consumption: |-
              Client may read Constraints from the DSS (references) and partner USSs (details).
      description: |-
        Authorization from, or on behalf of, an authorization authority. This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, publish to all providers the public key for verifying that signature, and implement standard OAuth server discovery mechanisms as described in RFC 8414.
          The following fields shall be included in the JWT claim for access tokens issued by this authority:
            * `iss`, with the URL at which the token generation request was received.
            * `exp`, with a time no further than 1 hour in the future.
            * `sub`, with unique ID of the client requesting the access token.
            * `scope`, with an array of strings indicating the scopes granted.
            * `jti`, according to RFC 7519.
            Only one scope shall be granted for a token. The tokens granted by this authority shall protect against reuse of received tokens to impersonate the sender to other recipients (via use of the `aud` claim or other means).
            Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.
  schemas:
    UUIDv4:
      description: |-
        Universally-unique identifier (version 4).
      maxLength: 36
      minLength: 36
      type: string
      format: uuid
      pattern: >-
        '^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$'
      example: '03e5572a-f733-49af-bc14-8a18bd53ee39'

    EntityUUID:
      description: |-
        Universally-unique identifier for an Entity communicated through
        the DSS. Formatted as UUIDv4.
      anyOf:
        - $ref: '#/components/schemas/UUIDv4'
      example: '2f8343be-6482-4d1b-a474-16847e01af1e'

    EntityOVN:
      title: EntityOVN
      description: |-
        A token associated with a particular UTM Entity+version created
        by the DSS upon creation or modification of an Entity reference and provided
        to the client creating or modifying the Entity reference. The EntityOVN
        is stored privately by the DSS and then compared against entries in a Key
        provided to mutate the airspace. The EntityOVN is also provided by
        the client whenever that client transmits the full information of the Entity
        (either via GET, or via a subscription notification).
      type: string
      minLength: 16
      maxLength: 128
      example: '9d158f59-80b7-4c11-9c0c-8a2b4d936b2d'

    SubscriptionUUID:
      description: |-
        Universally-unique identifier for a Subscription communicated through
        the DSS. Formatted as UUIDv4.
      anyOf:
        - $ref: '#/components/schemas/UUIDv4'
      example: '78ea3fe8-71c2-4f5c-9b44-9c02f5563c6f'

    Key:
      description: |
        Proof that a client has obtained the latest airspace content, used to ensure that write operations to the DSS occur only when the latest content is known (i.e. has been read). The client is required to pass a current Key constructed from information obtained with previous read operations and subsequent requests for full information, and optionally, subscription updates for deconflicted write operations to the DSS. The contents of this data structure are generated by the client.
      type: array
      items:
        $ref: '#/components/schemas/EntityOVN'
      default: []

    Time:
      required:
        - value
        - format
      type: object
      properties:
        value:
          type: string
          description: RFC3339-formatted time/date string. The time zone must be 'Z'.
          format: date-time
          example: '1985-04-12T23:20:50.52Z'
        format:
          type: string
          enum:
            - RFC3339

    Radius:
      required:
        - value
        - units
      type: object
      properties:
        value:
          format: float
          description: Distance from the centerpoint of a circular area, along the WGS84 ellipsoid.
          type: number
          example: 300.183
        units:
          type: string
          description: FIXM-compatible units. Only meters ("M") are acceptable for UTM.
          enum:
            - M

    Altitude:
      type: object
      required:
        - value
        - reference
        - units
      properties:
        value:
          description: |-
            The numeric value of the altitude. Note that min and max values are
            added as a sanity check. As use cases evolve and more options are
            made available in terms of units of measure or reference systems,
            these bounds should be re-evaluated.
          type: number
          format: double
          minimum: -8000
          exclusiveMinimum: false
          maximum: 100000
          exclusiveMaximum: false
        reference:
          description: |-
            A code indicating the reference for a vertical distance. See AIXM 5.1
            and FIXM 4.2.0. Currently, UTM only allows WGS84 with no immediate
            plans to allow other options. FIXM and AIXM allow for 'SFC' which is
            equivalent to AGL.
          type: string
          enum:
          - W84
        units:
          description: |-
            The reference quantities used to express the value of altitude. See
            FIXM 4.2. Currently, UTM only allows meters with no immediate plans
            to allow other options.
          type: string
          enum:
            - M

    Latitude:
      description: Degrees of latitude north of the equator, with reference to the WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      format: double
      example: 34.123

    Longitude:
      description: Degrees of longitude east of the Prime Meridian, with reference to the WGS84 ellipsoid.
      minimum: -180
      exclusiveMaximum: false
      maximum: 180
      exclusiveMinimum: false
      type: number
      format: double
      example: -118.456

    Polygon:
      description: |-
        An enclosed area on the earth.
        The bounding edges of this polygon shall be the shortest paths between connected vertices. This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude.
        The winding order shall be interpreted as the order which produces the smaller area.
        The path between two vertices shall be the shortest possible path between those vertices.
        Edges may not cross.
        Vertices may not be duplicated. In particular, the final polygon vertex shall not be identical to the first vertex.
      required:
        - vertices
      type: object
      properties:
        vertices:
          minItems: 3
          type: array
          items:
            $ref: '#/components/schemas/LatLngPoint'

    LatLngPoint:
      description: Point on the earth's surface.
      required:
        - lat
        - lng
      type: object
      properties:
        lng:
          $ref: '#/components/schemas/Longitude'
        lat:
          $ref: '#/components/schemas/Latitude'

    Point3D:
      description: |-
        Location of the point.
      type: object
      required:
        - lat_lng_point
        - altitude
      properties:
        lat_lng_point:
          $ref: '#/components/schemas/LatLngPoint'
        altitude:
          $ref: '#/components/schemas/Altitude'

    Circle:
      description: |-
        A circular area on the surface of the earth.
      type: object
      required:
        - center
        - radius
      properties:
        center:
          $ref: '#/components/schemas/LatLngPoint'
        radius:
          $ref: '#/components/schemas/Radius'

    Volume3D:
      description: |-
        A three-dimensional geographic volume consisting of a vertically-extruded shape. Exactly one of
        `outline_polygon` or `outline_circle` must be specified.
      required:
        - altitude_lower
        - altitude_upper
      type: object
      properties:
        outline_circle:
          anyOf:
            - $ref: '#/components/schemas/Circle'
          description: A circular geographic shape on the surface of the earth.
        outline_polygon:
          anyOf:
            - $ref: '#/components/schemas/Polygon'
          description: A polygonal geographic shape on the surface of the earth.
        altitude_lower:
          description: Minimum bounding altitude of this volume. Must be less than altitude_upper, if specified.
          anyOf:
            - $ref: '#/components/schemas/Altitude'
        altitude_upper:
          description: Maximum bounding altitude of this volume. Must be greater than altitude_lower, if specified.
          anyOf:
            - $ref: '#/components/schemas/Altitude'

    Volume4D:
      description: Contiguous block of geographic spacetime.
      required:
        - volume
        - time_start
        - time_end
      type: object
      properties:
        volume:
          $ref: '#/components/schemas/Volume3D'
        time_start:
          description: Beginning time of this volume. Must be before time_end.
          anyOf:
            - $ref: '#/components/schemas/Time'
        time_end:
          description: End time of this volume. Must be after time_start.
          anyOf:
            - $ref: '#/components/schemas/Time'

    ErrorResponse:
      description: |-
        Human-readable string returned when an error occurs
        as a result of a USS - DSS transaction.
      type: object
      properties:
        message:
          description: |-
            Human-readable message indicating what error occurred and/or why.
          type: string
          example: 'The error occurred because [...]'

    SubscriptionState:
      description: |-
        State of Subscription which is causing a notification to be sent.
      required:
        - subscription_id
        - notification_index
      type: object
      properties:
        subscription_id:
          $ref: '#/components/schemas/SubscriptionUUID'
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'

    SubscriberToNotify:
      description: |-
        Subscriber to notify of a change in the airspace. This is provided by the DSS
        to a client changing the airspace, and it is the responsibility of that client
        to send a notification to the specified USS according to the change made to the
        airspace.
      required:
        - subscriptions
        - uss_base_url
      type: object
      properties:
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
          minItems: 1
        uss_base_url:
          $ref: '#/components/schemas/SubscriptionUssBaseURL'

    Subscription:
      description: |-
        Specification of a geographic area that a client is interested
        in on an ongoing basis (e.g., "planning area").
      required:
        - id
        - version
        - notification_index
        - uss_base_url
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionUUID'
        version:
          description: |-
            Sequential version that the DSS increments every time the Subscription changes. A USS
            must specify this version when modifying an existing Subscription to ensure consistency
            in read-modify-write operations and distributed systems.
          type: integer
          format: int32
          minimum: 1
          exclusiveMinimum: false
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
        time_start:
          description: |-
            If set, this subscription will not receive notifications involving airspace changes
            entirely before this time.
          anyOf:
            - $ref: '#/components/schemas/Time'
        time_end:
          description: |-
            If set, this subscription will not receive notifications involving airspace changes
            entirely after this time.
          anyOf:
            - $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/SubscriptionUssBaseURL'
        notify_for_operations:
          description: If true, trigger notifications when Operations are created, updated, or deleted. Otherwise, changes in Operations should not trigger notifications.
          type: boolean
          default: false
        notify_for_constraints:
          description: If true, trigger notifications when Constraints are created, updated, or deleted. Otherwise, changes in Constraints should not trigger notifications.
          type: boolean
          default: false
        implicit_subscription:
          description: |-
            True if this Subscription was implicitly created by the DSS via the creation of an
            Operation, and should therefore be deleted by the DSS when that Operation is deleted.
          type: boolean
          default: false
        dependent_operations:
          description: List of Operations (UUIDs) that are dependent on this Subscription.
          type: array
          items:
            $ref: '#/components/schemas/EntityUUID'
          default: []

    SubscriptionNotificationIndex:
      format: int32
      description: Tracks the notifications sent for a subscription so the subscriber can detect missed notifications more easily.
      type: integer
      minimum: 0
      exclusiveMinimum: false
      default: 0

    SearchSubscriptionParameters:
      description: |-
        Parameters for a request to find Subscriptions matching the provided criteria.
      type: object
      properties:
        area_of_interest:
          $ref: '#/components/schemas/Volume4D'

    SearchSubscriptionsResponse:
      description: Response to DSS query for subscriptions in a particular geographic area.
      required:
        - subscriptions
      type: object
      properties:
        subscriptions:
          description: Subscriptions that overlap the specified geographic area.
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
          default: []

    GetSubscriptionResponse:
      description: Response to DSS request for the subscription with the given id.
      required:
        - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'

    PutSubscriptionParameters:
      description: |-
        Parameters for a request to create/update a subscription in the DSS.
      required:
        - extents
        - old_version
        - uss_base_url
      type: object
      properties:
        extents:
          $ref: '#/components/schemas/Volume4D'
        old_version:
          description: |-
            To ensure consistency in read-modify-write operations and distributed systems, the client must
            specify the version of this Subscription in the DSS that it is attempting to modify. If a new
            Subscription is being created, this version should be set to 0.
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: false
          default: 0
        uss_base_url:
          $ref: '#/components/schemas/SubscriptionUssBaseURL'
        notify_for_operations:
          description: If true, trigger notifications when Operations are created, updated, or deleted. Otherwise, changes in Operations should not trigger notifications.
          type: boolean
          default: false
        notify_for_constraints:
          description: If true, trigger notifications when Constraints are created, updated, or deleted. Otherwise, changes in Constraints should not trigger notifications.
          type: boolean
          default: false

    SubscriptionUssBaseURL:
      description: |-
        The base URL of a USS implementation of the parts of the USS-USS API necessary for
        receiving the notifications requested by this Subscription.
      anyOf:
        - $ref: '#/components/schemas/UssBaseURL'

    PutSubscriptionResponse:
      description: |-
        Response for a request to create or update a subscription.
      required:
        - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'
        operations:
          description: |-
            Operations in or near the subscription area at the time of creation/update,
            if `notify_for_operations` is true
          type: array
          items:
            $ref: '#/components/schemas/OperationReference'
          default: []
        constraints:
          description: |-
            Constraints in or near the subscription area at the time of creation/update,
            if `notify_for_constraints` is true
            was specified.
          type: array
          items:
            $ref: '#/components/schemas/ConstraintReference'
          default: []

    DeleteSubscriptionResponse:
      description: Response for a successful request to delete an Subscription.
      required:
        - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'

    UssBaseURL:
      description: |-
        The base URL of a USS implementation of part or all of the USS-USS API. Per the USS-USS API, the full URL
        of a particular resource can be constructed by appending, e.g., `/uss/v1/{resource}/{id}` to this base URL.
        Accordingly, this URL may not have a trailing '/' character.
      type: string
      example: 'https://utm_uss.com/utm'

    OperationState:
      description: |-
        State of an Operation.
        'Accepted': This Operation was fully deconflicted from other Entities at the time it changed to this
        state, but no aircraft associated with it are active yet. The create or update request for this
        Operation must include a Key containing all OVNs for all relevant Entities.
        'Activated': One or more aircraft associated with this Operation are, or will imminently be, in
        flight. The create or update request for this Operation must include a Key containing all OVNs for
        all relevant Entities.
        'NonConforming': This Operation is outside of the tolerance for its current location.
        The new or updated TrajectoryPoint(s) MUST
        reflect the actual position of the aircraft. The create or update request
        for this Operation may omit a Key in this case because the Operation is being adjusted as flown and
        cannot necessarily deconflict.
        'Contingent': This Operation is executing a contingency action, either because it has been
        NonConforming for a certain period of time, or because of operator initiation. This state must
        transition to Ended. The new or updated TrajectoryPoint(s) MUST contain the actual position of the aircraft.
        The create or update request for this Operation may omit a Key in this
        case because the Operation is being adjusted as flown and cannot necessarily deconflict.
        'Ended': This Operation has ended (due to either an Operator-induced change or flight completion).
      type: string
      enum:
        - Accepted
        - Activated
        - NonConforming
        - Contingent
        - Ended

    OperationReference:
      description: |-
        The high-level information of a planned or active Operation with the URL
        of a USS to query for details. Note: 'OVN' is returned ONLY to the USS that
        created the Operation but NEVER to other USS instances.
      required:
        - id
        - owner
        - version
        - time_start
        - time_end
        - uss_base_url
        - subscription_id
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        owner:
          type: string
          example: 'uss1'
          description: |-
            Created by the DSS based on creating client's ID (via access token). Used internal
            to the DSS for restricting mutation and deletion operations to owner. Used by USSs
            to reject Operation update notifications originating from a USS that does not own
            the Operation.
        version:
          description: |-
            Sequential version that the DSS increments every time the Operation changes. A USS
            may use this version to determine which Operation references have new details that
            must be retrieved.
          type: integer
          format: int32
          minimum: 1
          exclusiveMinimum: false
        ovn:
          description: |-
            Opaque version number of this Operation. Populated only when the OperationReference
            is owned by the USS retrieving or providing it. Not populated when the
            OperationReference is not owned by the USS retrieving or providing it (instead, the
            USS must obtain the OVN from the details retrieved from the owning USS).
          anyOf:
            - $ref: '#/components/schemas/EntityOVN'
        time_start:
          description: Beginning time of Operation. The estimated time at which the aircraft will commence movement associated with departure (ETD).
          externalDocs:
            description: See FIXM 4.2.0 for further information.
            url: https://www.fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_DepartureType.html#Link243
          anyOf:
            - $ref: '#/components/schemas/Time'
        time_end:
          description: End time of Operation. The estimated time at which the aircraft will arrive at the destination vertiport (ETA).
          anyOf:
            - $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/OperationUssBaseURL'
        subscription_id:
          description: |-
            The ID of the Subscription that is ensuring the Operation owner receives relevant
            airspace updates.
          anyOf:
            - $ref: '#/components/schemas/SubscriptionUUID'

    OperationUssBaseURL:
      description: |-
        The base URL of a USS implementation that implements the parts of the USS-USS API necessary for
        providing the details of this Operation, and telemetry during non-conformance or contingency,
        if applicable.
      anyOf:
        - $ref: '#/components/schemas/UssBaseURL'

    PutOperationReferenceParameters:
      description: |-
        Parameters for a request to create an OperationReference in the DSS.
        A subscription to changes overlapping this volume may be implicitly created, but
        this can be overridden by providing the (optional) 'subscription_id' to use.
        Note: The implicit subscription is managed by the DSS, not the USS.
      required:
        - extents
        - old_version
        - state
        - uss_base_url
      type: object
      properties:
        extents:
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
          minItems: 1
        old_version:
          description: |-
            To ensure consistency in read-modify-write operations and distributed systems, the client must
            specify the version of this Operation in the DSS that it is attempting to modify. If a new
            Operation is being created, this version should be set to 0.
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: false
          default: 0
        key:
          description: |-
            Proof that the USS creating or mutating this Operation was aware of the current state of the
            airspace, with the expectation that this Operation is therefore deconflicted from all relevant
            features in the airspce. This field is not required when declaring an Operation NonConforming
            or Contingent, or when there are no relevant Entities in the airspace, but is otherwise required.
            OVNs for Constraints are required if and only if the USS owning this Operation is considering
            Constraints, which is determined by whether the Subscription associated with this Operation
            triggers notifications for Constraints.
          anyOf:
            - $ref: '#/components/schemas/Key'
        state:
          $ref: '#/components/schemas/OperationState'
        uss_base_url:
          $ref: '#/components/schemas/OperationUssBaseURL'
        subscription_id:
          description: |-
            The ID of an existing Subscription that the USS will use to keep the operator informed about
            updates to relevant airspace information. If this field is not provided, then the
            `new_subscription` field must be provided in order to provide notification capability
            for the Operation. The Subscription specified by this ID must cover at least the area over
            which this Operation is conducted, and it must provide notifications for Operations.
          anyOf:
            - $ref: '#/components/schemas/EntityUUID'
        new_subscription:
          description: |-
            If an existing Subscription is not specified in `subscription_id`, then this field must be
            populated. When this field is populated, an implicit Subscription will be created and
            associated with this Operation, and will generally be deleted automatically upon the
            deletion of this Operation.
          anyOf:
            - $ref: '#/components/schemas/ImplicitSubscriptionParameters'

    ImplicitSubscriptionParameters:
      description: |-
        Information necessary to create a Subscription to serve a single Operation's notification needs.
      type: object
      required:
        - uss_base_url
      properties:
        uss_base_url:
          description: |-
            The base URL of a USS implementation of the parts of the USS-USS API necessary for
            receiving the notifications that the Operation must be aware of. This includes, at least,
            notifications for relevant changes in Operations.
          anyOf:
            - $ref: '#/components/schemas/SubscriptionUssBaseURL'
        notify_for_constraints:
          description: |-
            True if this Operation's Subscription should trigger notifications when Constraints change. Otherwise, changes in Constraints should not trigger notifications.
          type: boolean
          default: false

    GetOperationReferenceResponse:
      description: |-
        Response to DSS request for the OperationReference with the given ID.
      required:
        - operation_reference
      type: object
      properties:
        operation_reference:
          $ref: '#/components/schemas/OperationReference'

    ChangeOperationReferenceResponse:
      description: |-
        Response to a request to create, update, or delete an OperationReference
        in the DSS.
      required:
        - subscribers
        - operation_reference
      type: object
      properties:
        subscribers:
          description: |-
            DSS subscribers that this client now has the obligation to
            notify of the Operation changes just made. This client must call POST
            for each provided URL according to the USS-USS `/v1/operations/{entityuuid}`
            path API. The client's own Subscriptions will also be included in this list.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
          default: []
        operation_reference:
          $ref: '#/components/schemas/OperationReference'

    SearchOperationReferenceParameters:
      description: |-
        Parameters for a request to find OperationReferences matching the provided criteria.
      type: object
      properties:
        area_of_interest:
          $ref: '#/components/schemas/Volume4D'

    SearchOperationReferenceResponse:
      description: Response to DSS query for OperationReferences in an area of interest.
      required:
        - operation_references
      type: object
      properties:
        operation_references:
          description: OperationReferences in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/OperationReference'
          default: []

    ConstraintReference:
      description: A ConstraintReference (area in which a Constraint is present, along with other high-level information, but no details). The DSS reports only these references and clients must exchange details and additional information peer-to-peer.
      required:
        - id
        - owner
        - version
        - time_start
        - time_end
        - uss_base_url
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        owner:
          type: string
          example: 'uss1'
          description: |-
            Created by the DSS based on creating client's ID (via access token). Used internal
            to the DSS for restricting mutation and deletion operations to owner. Used by USSs
            to reject Constraint update notifications originating from a USS that does not own
            the Constraint.
        version:
          description: |-
            Sequential version that the DSS increments every time the Constraint changes. A USS
            may use this version to determine which Constraint references have new details that
            must be retrieved.
          type: integer
          format: int32
          minimum: 1
          exclusiveMinimum: false
        ovn:
          description: |-
            Opaque version number of this Constraint. Populated only when the ConstraintReference
            is owned by the USS retrieving or providing it. Not populated when the
            ConstraintReference is not owned by the USS retrieving or providing it (instead, the
            USS must obtain the OVN from the details retrieved from the owning USS).
          anyOf:
            - $ref: '#/components/schemas/EntityOVN'
        time_start:
          $ref: '#/components/schemas/Time'
        time_end:
          $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/ConstraintUssBaseURL'

    ConstraintUssBaseURL:
      description: |-
        The base URL of a USS implementation that implements the parts of the USS-USS API necessary for
        providing the details of this Constraint.
      anyOf:
        - $ref: '#/components/schemas/UssBaseURL'

    PutConstraintReferenceParameters:
      description: Parameters for a request to create/update a ConstraintReference in the DSS.
      required:
        - extents
        - old_version
        - uss_base_url
      type: object
      properties:
        extents:
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
          minItems: 1
        old_version:
          description: |-
            To ensure consistency in read-modify-write operations and distributed systems, the client must
            specify the version of this Constraint in the DSS that it is attempting to modify. If a new
            Constraint is being created, this version should be set to 0.
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: false
          default: 0
        uss_base_url:
          $ref: '#/components/schemas/ConstraintUssBaseURL'

    GetConstraintReferenceResponse:
      description: Response to DSS request for the ConstraintReference with the given ID.
      required:
        - constraint_reference
      type: object
      properties:
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    ChangeConstraintReferenceResponse:
      description: Response to a request to create, update, or delete a ConstraintReference. in the DSS.
      required:
        - subscribers
      type: object
      properties:
        subscribers:
          description: DSS subscribers that this client now has the obligation to notify of the Constraint changes just made. This client must call POST for each provided URL according to the USS-USS `/v1/constraints/{entityuuid}` path API. The client's own Subscriptions will also be included in this list.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
          default: []
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    SearchConstraintReferenceParameters:
      description: |-
        Parameters for a request to find ConstraintReferences matching the provided criteria.
      type: object
      properties:
        area_of_interest:
          $ref: '#/components/schemas/Volume4D'

    SearchConstraintReferencesResponse:
      description: Response to DSS query for ConstraintReferences in an area of interest.
      required:
        - constraint_references
      type: object
      properties:
        constraint_references:
          description: ConstraintReferences in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/ConstraintReference'
          default: []

    EntityReference:
      description: Reference to a generic Entity known to the DSS.
      type: object
      properties:
        operation_reference:
          $ref: '#/components/schemas/OperationReference'
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    AirspaceConflictResponse:
      description: Data provided when an airspace conflict was encountered.
      type: object
      properties:
        message:
          description: Human-readable message indicating what error occurred and/or why.
          type: string
        entity_conflicts:
          description: List of Entity references for which current proof of knowledge was not provided. If this field is present and contains elements, the calling USS should query the details URLs for these Entities to obtain their details and correct OVNs. The OVNs can be used to update the key, at which point the USS may retry this call.
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
          default: []

    ErrorReport:
      description: A report informing a server of a communication problem.
      required:
        - url
        - response_code
        - problem
      type: object
      properties:
        url:
          description: URL of request that resulted in an error.
          type: string
        headers:
          description: Set of headers included in request that resulted in an error.
          type: array
          items:
            type: string
          default: []
        body:
          description: Base64-encoded body content sent in request that resulted in an error.
          type: string
        response_code:
          type: integer
          format: int32
          description: HTTP response code encountered in error response.
        response_body:
          type: string
          description: Base64-encoded body content received in response that was in error.
        problem:
          type: string
          description: Human-readable description of the problem with the response.
        time_request:
          description: The time at which the problematic request was initiated.
          anyOf:
            - $ref: '#/components/schemas/Time'
        time_response:
          description: The time at which the problematic response was received.
          anyOf:
            - $ref: '#/components/schemas/Time'
        report_id:
          description: ID assigned by the server receiving the report. Not populated when submitting a report.
          type: string
          maxLength: 128

#
# USS-USS schema components
#
    OperationDetails:
      description: |-
        Details of a UTM Operation. Note that this data is not stored in the DSS; only with the clients.
      required:
        - aircraft_registration
        - state
        - trajectory
      type: object
      properties:
        aircraft_registration:
          type: string
          pattern: "[A-Z0-9]{1,7}"
          description: |
            A unique, alphanumeric string that identifies a civil aircraft and consists of the Aircraft
            Nationality or Common Mark and an additional alphanumeric string, the registration mark,
            assigned by the state of registry or common mark registering authority. [FIXM]
          minLength: 1
          maxLength: 7
          x-uam-data-accessibility: PUBLIC
          externalDocs:
            description: See FIXM 4.2.0 for further information.
            url: https://fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_AircraftRegistrationType.html#LinkBC
        operator_name:
          description: The identifier of the UAM Operator. Required if different than the PSU.
          type: string
          pattern: "[A-Z]{3}"
          example: "AAL"
          externalDocs:
            description: See FIXM 4.2.0 for further information.
            url: https://www.fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_AircraftOperatorType.html#Link1E3
        state:
          $ref: '#/components/schemas/OperationState'
        trajectory:
          type: array
          minItems: 2
          maxItems: 1000
          description: |-
            The list of TrajectoryPoints for this operation. This list must contain
            all significant TrajectoryPoints. A new TrajectoryPoint should be provided
            for each change in speed, cruise altitude, and/or heading. Speed is assumed
            to be held constant between TrajectoryPoints. For additional insight on points
            to be included, see the enumeration of property types in the TrajectoryPoint4D model.
          items:
            $ref: '#/components/schemas/TrajectoryPoint4D'

    Operation:
      description: Full description of a UTM Operation.
      required:
        - reference
        - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/OperationReference'
        details:
          $ref: '#/components/schemas/OperationDetails'

    PutOperationDetailsParameters:
      description: |-
        Parameters of a message informing of detailed information for a peer Operation.
        Pushed (by a client, not the DSS) directly to clients with subscriptions when
        another client makes a change to airspace within a cell with a subscription.
      required:
        - operation_id
        - subscriptions
      type: object
      properties:
        operation_id:
          description: ID of Operation that has changed.
          anyOf:
            - $ref: '#/components/schemas/EntityUUID'
        operation:
          description: |-
            Full information about the Operation that has changed. If this field is omitted,
            the Operation was deleted. A newly-created Operation can be differentiated from
            an updated Operation by examining the `version` field. The `ovn` field in the
            nested `reference` must be populated.
          anyOf:
            - $ref: '#/components/schemas/Operation'
        subscriptions:
          type: array
          description: Subscription(s) prompting this notification.
          items:
            $ref: '#/components/schemas/SubscriptionState'
          minItems: 1

    GetOperationDetailsResponse:
      description: Response to peer request for the details of Operation with the given ID.
      required:
        - operation
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/Operation'

    ConstraintDetails:
      description: Details of a UTM Constraint. Note that this data is not stored in the DSS; only with the clients.
      required:
        - volumes
      type: object
      properties:
        volumes:
          description: Volumes that wholly contain the Constraint while being as small as practical.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        type:
          description: Type of airspace feature this Constraint represents.
          type: string
          example: 'NonUTMAircraftOperations'

    Constraint:
      description: Full specification of a UTM Constraint.
      required:
        - reference
        - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/ConstraintReference'
        details:
          $ref: '#/components/schemas/ConstraintDetails'

    PutConstraintDetailsParameters:
      description: Parameters of a message informing of new full information for a Constraint. Pushed (by a client, not the DSS) directly to clients with subscriptions when another client makes a change to airspace within a cell with a subscription.
      required:
        - constraint_id
        - subscriptions
      type: object
      properties:
        constraint_id:
          description: ID of Constraint that has changed.
          anyOf:
            - $ref: '#/components/schemas/EntityUUID'
        constraint:
          description: |-
            Full information about the Constraint that has changed. If this field is omitted,
            the Constraint was deleted. A newly-created Constraint can be differentiated from
            an updated Constraint by examining the `version` field. The `ovn` field in the
            nested `reference` must be populated.
          anyOf:
            - $ref: '#/components/schemas/Constraint'
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
          minItems: 1

    GetConstraintDetailsResponse:
      description: |-
        Response to peer request for the details of Constraint with the given ID.
      required:
        - constraint
      type: object
      properties:
        constraint:
          $ref: '#/components/schemas/Constraint'

    GetOperationTelemetryResponse:
      description: Response to a peer request for telemetry of an off-nominal Operation.
      required:
        - telemetry
      type: object
      properties:
        telemetry:
          $ref: '#/components/schemas/VehicleTelemetry'

    VehicleTelemetry:
      description: Vehicle position, altitude, and velocity. The id property is the ID of the Operation this telemetry data corresponds to.
      required:
        - id
        - time_measured
        - position
        - velocity
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        position:
          $ref: '#/components/schemas/Position'
        velocity:
          $ref: '#/components/schemas/Velocity'
        time_measured:
          $ref: '#/components/schemas/Time'

    PositionAccuracyVertical:
      description: |-
        Vertical error that is likely to be present in this reported position.
        This is the GVA enumeration from ADS-B, plus some finer values for UAS.
      type: string
      enum:
        - VAUnknown
        - VA150mPlus
        - VA150m
        - VA45m
        - VA25m
        - VA10m
        - VA3m
        - VA1m

    PositionAccuracyHorizontal:
      description: |-
        Horizontal error that is likely to be present in this reported position.
        This is the NACp enumeration from ADS-B, plus 1m for a more complete range for UAS.
      type: string
      enum:
        - HAUnknown
        - HA10NMPlus
        - HA10NM
        - HA4NM
        - HA2NM
        - HA1NM
        - HA05NM
        - HA03NM
        - HA01NM
        - HA005NM
        - HA30m
        - HA10m
        - HA3m
        - HA1m

    TrajectoryPoint4D:
      description: |
        A point for use within a planned trajectory.
        Tolerance around the point is standardized, and will be applicable
        to all operations in a given area.

        Currently Flight Rule is not expected to change during an operation. If it does, the
        following may be added as a new property:
        https://fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_RouteTrajectoryElementType.html#Link2A3
      required:
        - point_3d
        - time
        - speed
        - trajectory_property_array
      type: object
      properties:
        point_designator:
          description: The name of the designated point. This is required for all named points, including vertipads.
          type: string
          pattern: '[A-Z0-9]{1,5}'
          externalDocs:
            description: See FIXM 4.2.0 for further information.
            url: https://www.fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_DesignatedPointType.html#Link15B
        point_3d:
          description: Location of the TrajectoryPoint.
          anyOf:
            - $ref: '#/components/schemas/Point3D'
        time:
          description: |-
            Estimated time when the vehicle will be at the location of the TrajectoryPoint
          $ref: '#/components/schemas/Time'
        speed:
          description: |-
            Speed of the vehicle at this TrajectoryPoint.
            FIXM allows for two speed entries: predictedAirspace and predictedGroundspeed
          anyOf:
            - $ref: '#/components/schemas/Velocity'
        trajectory_property_array:
          description: |-
            Describes any applicable properties of the trajectory point.
            May include multiple properties per point. FIXM allows up to 2000 properties per
            trajectory point. For X4 we are allowing up to 4.
            The first point of initial plan must include at a minimum: AIRPORT_REFERENCE_LOCATION, WHEELS_OFF
            The last point must include at a minimum: AIRPORT_REFERENCE_LOCATION, WHEELS_ON
            Each named airspace structure point must include at a minimum: WAYPOINT
          type: array
          minItems: 1
          maxItems: 4
          items:
            $ref: '#/components/schemas/TrajectoryProperty'
          externalDocs:
            url: https://fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_TrajectoryPoint4DType.html#Link2AC
      externalDocs:
        description: "See FIXM 4.2.0 for further information."
        url: https://www.fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_TrajectoryPoint4DType.html#Link116

    TrajectoryProperty:
      description: Describes any applicable properties of the trajectory point.
      type: object
      required:
        - property_type
      properties:
        property_type:
          description: |
            Provides the type of trajectory point property. Enum list is based on the FIXM definition
            of TrajectoryPointPropertyType.
          type: string
          enum:
            - WAYPOINT
            - TOP_OF_CLIMB
            - TOP_OF_DESCENT
            - TCP_VERTICAL
            - TCP_SPEED
            - TCP_LATERAL
            - WHEELS_OFF
            - WHEELS_ON
            - AIRPORT_REFERENCE_LOCATION
            - ENTRY_CORRIDOR
            - EXIT_CORRIDOR
          externalDocs:
            description: FIXM definition of TrajectoryPointPropertyType
            url: https://fixm.aero/releases/FIXM-4.2.0/doc/schema_documentation/Fixm_TrajectoryPointPropertyType.html#Link2B0

    Position:
      description: |-
        Location of the vehicle (UAS) as reported for UTM.
        Note: 'accuracy' values are required when extrapolated field is true
        and always in the entry for the current state.
      type: object
      required:
        - longitude
        - latitude
        - altitude
      properties:
        longitude:
          $ref: '#/components/schemas/Longitude'
        latitude:
          $ref: '#/components/schemas/Latitude'
        accuracy_h:
          $ref: '#/components/schemas/PositionAccuracyHorizontal'
        accuracy_v:
          $ref: '#/components/schemas/PositionAccuracyVertical'
        extrapolated:
          description: |-
            True if this position was generated primarily by computation
            rather than primarily from a direct instrument measurement.
            Assumed false if not specified.
          type: boolean
          default: false
        altitude:
          $ref: '#/components/schemas/Altitude'

    Velocity:
      description: |-
        Velocity of the associated vehicle at the time_measured.
      required:
        - speed
        - units_speed
      type: object
      properties:
        speed:
          format: float
          type: number
          description: |-
            Speed numerical value.
          example: 200.1
        units_speed:
          type: string
          enum:
            - MetersSecond
            - Knots
        track:
          format: float
          type: number
          description: |-
            Direction of flight expressed as a "True North-based" ground track angle.
            This value is provided in degrees East of North with a minimum resolution of 1 degree.
          example: 120
        speed_type:
          description: |-
            Default is 'Ground'
          type: string
          enum:
            - GROUND
            - AIR

paths:
  #
  # DSS Endpoint: OPERATIONS
  #

  /dss/v1/operation_references/query:
    summary: Query all Operations in the DSS that intersect with a specified geographic area, altitude-range, and time-range.
    description: "Interface to Operation references in the DSS."

    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchOperationReferenceParameters'
        required: true
      tags:
        - "Operation references"
        - dss
      security:
        - Authority:
            - utm.strategic_coordination
      summary: Retrieve all Operation references in the specified area/volume/time from the DSS.
      operationId: searchOperationReferences
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchOperationReferenceResponse'
          description: Operations were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /dss/v1/operation_references/{entityuuid}:
    summary: CRUD endpoint for a specified Operation reference in the DSS.
    parameters:
      - name: entityuuid
        description: EntityUUID of the Operation.
        schema:
          $ref: '#/components/schemas/EntityUUID'
        in: path
        required: true

    get:
      tags:
        - "Operation references"
        - dss
      security:
        - Authority:
            - utm.strategic_coordination
      summary: Retrieve the specified Operation reference from the DSS.
      operationId: getOperationReference
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationReferenceResponse'
          description: Operation reference was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutOperationReferenceParameters'
        required: true
      tags:
        - "Operation references"
        - dss
      security:
        - Authority:
            - utm.strategic_coordination
      summary: Create/Update the specified Operation reference in the DSS.
      operationId: putOperationReference
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationReferenceResponse'
          description: An Operation reference was updated successfully in the DSS.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationReferenceResponse'
          description: An Operation reference was created successfully in the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Operation in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirspaceConflictResponse'
          description: |-
            * The provided key did not prove knowledge of all current and relevant airspace Entities
            * The provided `old_version` does not match the current version of the existing Operation.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The area of the Operation is too large.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

    delete:
      tags:
        - "Operation references"
        - dss
      security:
        - Authority:
            - utm.strategic_coordination
      summary: Remove the specified Operation reference from the DSS.
      operationId: deleteOperationReference
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationReferenceResponse'
          description: The specified Operation was successfully removed from the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Operation in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  #
  # DSS Enpoint: CONSTRAINTS
  #

  /dss/v1/constraint_references/query:
    summary: Query all Constraint references in the DSS that intersect with a specified area/volume/time.
    description: ""

    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchConstraintReferenceParameters'
        required: true
      tags:
        - "Constraint references"
        - dss
      security:
        - Authority:
            - utm.constraint_management
            - utm.constraint_consumption
            - utm.strategic_coordination
      summary: Retrieve all Constraints references in the specified area/volume from the DSS.
      operationId: queryConstraintReferences
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchConstraintReferencesResponse'
          description: Constraints were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /dss/v1/constraint_references/{entityuuid}:
    parameters:
      - name: entityuuid
        description: EntityUUID of the Constraint.
        schema:
          $ref: '#/components/schemas/EntityUUID'
        in: path
        required: true
    summary: CRUD endpoint for a specified Constraint reference in the DSS.

    get:
      tags:
        - "Constraint references"
        - dss
      security:
        - Authority:
            - utm.constraint_management
            - utm.constraint_consumption
            - utm.strategic_coordination
      summary: Retrieve the specified Constraint reference from the DSS.
      operationId: getConstraintReference
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConstraintReferenceResponse'
          description: Constraint reference was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutConstraintReferenceParameters'
        required: true
      tags:
        - "Constraint references"
        - dss
      security:
        - Authority:
            - utm.constraint_management
      summary: Create/Update the specified Constraint reference in the DSS.
      operationId: putConstraintReference
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
          description: A Constraint reference was updated successfully in the DSS.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
          description: A Constraint reference was created successfully in the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Constraint in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The provided `old_version` does not match the current version of the existing Constraint.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The area of the Operation is too large.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

    delete:
      tags:
        - "Constraint references"
        - dss
      security:
        - Authority:
            - utm.constraint_management
      summary: Delete the specified Constraint reference from the DSS.
      operationId: deleteConstraintReference
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
          description: The Constraint was successfully removed from the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Constraint in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  #
  # DSS Endpoint: SUBSCRIPTIONS
  #

  /dss/v1/subscriptions/query:
    summary: Subscriptions for airspace updates to a volume of interest.

    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchSubscriptionParameters'
        required: true
      tags:
        - "Subscriptions"
        - dss
      security:
        - Authority:
            - utm.constraint_consumption
            - utm.strategic_coordination
      description: |-
        Retrieve Subscriptions intersecting an area of interest. Subscription
        notifications are only triggered by (and contain full information of) changes to,
        creation of, or deletion of, Entities referenced by or stored in the DSS;
        they do not involve any data transfer (such as remote ID telemetry updates) apart
        from Entity information.
        Note that this parameter is a JSON object (in the 'request-body'). Note that either
        or both of the 'altitude' and 'time' values may be omitted from this parameter.
        Only Subscriptions belonging to the caller are returned. This endpoint would be
        used if a USS lost track of Subscriptions they had created and/or wanted to resolve
        an error indicating that they had too many existing Subscriptions in an area.
      summary: Retrieve all Subscriptions in the specified area/volume from the DSS.
      operationId: querySubscriptions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSubscriptionsResponse'
          description: Subscriptions were retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /dss/v1/subscriptions/{subscriptionid}:
    summary: Create/Update a specific Subscription in the DSS.
    parameters:
      - name: subscriptionid
        description: SubscriptionUUID of the subscription of interest.
        schema:
          $ref: '#/components/schemas/SubscriptionUUID'
        in: path
        required: true

    get:
      tags:
        - "Subscriptions"
        - dss
      security:
        - Authority:
            - utm.constraint_consumption
            - utm.strategic_coordination
      summary: Retrieve the specified Subscription from the DSS.
      operationId: getSubscription
      description: |-
        Retrieve a specific subscription.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionResponse'
          description: Subscription information was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: A Subscription with the specified ID was not found.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

    put:
      security:
        - Authority:
            - utm.constraint_consumption
            - utm.strategic_coordination
      summary: Create/Update the specified Subscription in the DSS.
      operationId: putSubscription
      description: |-
        Create or update a subscription.
        Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSubscriptionParameters'
        required: true
      tags:
        - "Subscriptions"
        - dss
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSubscriptionResponse'
          description: A new Subscription was created successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Subscription in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.
            * Client attempted to request notifications for an Entity type to which the scopes included in the access token do not provide access.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * A Subscription with the specified ID already exists and is owned by a different client.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Client already has too many Subscriptions in the area where a new Subscription was requested. To correct this problem, the client may query GET /subscriptions to see which Subscriptions are counting against their limit. This problem should not generally be encountered because the Subscription limit should be above what any consumer that reasonably aggregates their Subscriptions should request. But, a Subscription limit is necessary to bound performance requirements for DSS instances and would likely be hit by, e.g., a large remote ID display provider that created a Subscription for each of their display client users' views. Alternately, the client may have issued too many requests within a small period of time.

    delete:
      tags:
        - "Subscriptions"
        - dss
      security:
        - Authority:
            - utm.constraint_consumption
            - utm.strategic_coordination
      summary: Remove the specified Subscription from the DSS.
      operationId: deleteSubscription
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSubscriptionResponse'
          description: Subscription was successfully removed from DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: A Subscription with the specified ID was not found.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  #
  # DSS Endpoint: REPORT
  #

  /dss/v1/reports:
    summary: Error reports of potential operational issues relevant to DSSs.

    post:
      security:
        - Authority:
            - utm.constraint_management
            - utm.constraint_consumption
            - utm.strategic_coordination
      summary: Report information about communication issues to a DSS.
      operationId: makeDssReport
      description: Report issues to a DSS. Data sent to this endpoint is archived.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorReport'
        required: true
      tags:
        - "Reports"
        - dss
      responses:
        "201":
          description: A new Report was created successfully (and archived).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The report could not be parsed, or contains unrecognized data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  #
  # USS Endpoint: OPERATIONS
  #

  /psu/v1/operations/{entityuuid}:
    summary: Query detailed information of an Operation from a USS.
    parameters:
      - name: entityuuid
        description: EntityUUID for this Operation.
        schema:
          $ref: '#/components/schemas/EntityUUID'
        in: path
        required: true

    get:
      tags:
        - "Operation details"
        - p2p_utm
      security:
        - Authority:
            - utm.strategic_coordination
      summary: Retrieve the specified Operation details from a USS.
      description: |-
        The PSU hosting this endpoint returns the details (and reference) of an
        Operation it owns. While the PSU has a pending request to change the
        Operation in the DSS, the PSU should report the most recent version the
        PSU knows was accepted by the DSS. So, before a PSU receives a response
        to create an Operation reference in the DSS, it should return 404 if
        queried for that Operation at this endpoint.
      operationId: getOperationDetails
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationDetailsResponse'
          description: Operation details were retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /psu/v1/operations/{entityuuid}/telemetry:
    summary: Detailed information on the telemetry of an Operation.
    parameters:
      - name: entityuuid
        description: EntityUUID for this Operation.
          The 'entityuuid' http request URL parameter should be set to the ID of the
          Operation for which telemetry data is requested.
        schema:
          $ref: '#/components/schemas/EntityUUID'
        in: path
        required: true

    get:
      tags:
        - "Operation details"
        - p2p_utm
      security:
        - Authority:
            - utm.strategic_coordination
      summary: Query detailed information on the position of an Operation from a USS.
      operationId: getOperationTelemetry
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationTelemetryResponse'
          description: Operation telemetry details were retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No telemetry data is available.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation is not in a state that provides telemetry.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /psu/v1/operations:
    summary: A USS's representation of detailed information about Operations.

    post:
      tags:
        - "Operation details"
        - p2p_utm
      security:
        - Authority:
            - utm.strategic_coordination
      summary: Notify a peer USS of changed Operation details.
      operationId: notifyOperationDetailsChanged
      description: Notify a peer USS directly of changed Operation details (usually as a requirement of previous interactions with the DSS).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutOperationDetailsParameters'
        required: true
      responses:
        "204":
          description: New or updated full Operation information received successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  #
  # PSU Endpoint: CONSTRAINTS
  #

  /uss/v1/constraints/{entityuuid}:
    summary: Query detailed information of a Constraint from a USS.
    parameters:
      - name: entityuuid
        description: EntityUUID of the Constraint.
        schema:
          $ref: '#/components/schemas/EntityUUID'
        in: path
        required: true

    get:
      tags:
        - "Constraint details"
        - p2p_utm
      security:
        - Authority:
            - utm.strategic_coordination
            - utm.constraint_consumption
      summary: Retrieve the specified Constraint details from a USS.
      operationId: getConstraintDetails
      description: Retrieve the details of the specified Constraint.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConstraintDetailsResponse'
          description: Constraint details were retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /uss/v1/constraints:
    summary: A USS's representation of detailed information about Constraints.

    post:
      tags:
        - "Constraint details"
        - p2p_utm
      security:
        - Authority:
            - utm.strategic_coordination
            - utm.constraint_consumption
      summary: Notify a peer USS of changed Constraint details.
      operationId: notifyConstraintDetailsChanged
      description: Notify a peer USS directly of changed Constraint details (usually as a requirement of previous interactions with the DSS).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutConstraintDetailsParameters'
        required: true
      responses:
        "204":
          description: New or updated full Constraint information received successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The Entity version specified in this message is lower than a previously-received notification, or identical to a previously-received notification and the Entity is different.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  #
  # PSU Endpoint: (OTHER)
  #

  /psu/v1/reports:
    summary: Error reports of issues communicating with a peer USS.

    post:
      tags:
        - "Reports"
        - p2p_utm
      security:
        - Authority:
            - utm.strategic_coordination
            - utm.constraint_consumption
            - utm.constraint_management
      summary: Notify USS of an error encountered that might otherwise go unnoticed.
      operationId: makeUssReport
      description: Endpoint to provide feedback (errors, etc.) that might otherwise go unnoticed by this USS. This endpoint is used for all feedback related to Operations and Constraints.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorReport'
        required: true
      responses:
        "201":
          description: Report received and successfully archived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The report could not be parsed, or contains unrecognized data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.
